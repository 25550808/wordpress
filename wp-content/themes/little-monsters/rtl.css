/*
Theme Name: littlemonsters

Adding support for languages written in a Right To Left (RTL) direction is easy,
it's just a matter of overwriting all the horizontal positioning attributes
of your CSS stylesheet in a separate stylesheet file named rtl.css.

https://codex.wordpress.org/Right-to-Left_Language_Support

*/
/* $headings-font-weight:    700 !default; */
/*
 * Global variables
 */
/* main color which will be used for all main block styles... */
/**
 * Import component variables
 */
/**
 *
 */
/**
 *   Blocks Layout Selectors
 */
/********* LAYOUT **************/
/**
 * Import component variables
 */
/** elements mixins **/
/**
* Transition-timing-function property@mixin 
*/
/*background RGBA
============================================*/
/*inline-block
============================================*/
/****/
/****/
/****/
/** elements mixins **/
/**
* Transition-timing-function property@mixin 
*/
/*background RGBA
============================================*/
/*inline-block
============================================*/
/****/
/****/
.rtl .owl-carousel .owl-wrapper-outer {
  direction: ltr !important; }

.rtl .owl-carousel .owl-item {
  float: left; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"file":"rtl.css","sources":["rtl.scss","bootstrap/_variables.scss","bootstrap/_mixins.scss","bootstrap/mixins/_hide-text.scss","bootstrap/mixins/_opacity.scss","bootstrap/mixins/_image.scss","bootstrap/mixins/_labels.scss","bootstrap/mixins/_reset-filter.scss","bootstrap/mixins/_resize.scss","bootstrap/mixins/_responsive-visibility.scss","bootstrap/mixins/_size.scss","bootstrap/mixins/_tab-focus.scss","bootstrap/mixins/_reset-text.scss","bootstrap/mixins/_text-emphasis.scss","bootstrap/mixins/_text-overflow.scss","bootstrap/mixins/_vendor-prefixes.scss","bootstrap/mixins/_alerts.scss","bootstrap/mixins/_buttons.scss","bootstrap/mixins/_panels.scss","bootstrap/mixins/_pagination.scss","bootstrap/mixins/_list-group.scss","bootstrap/mixins/_nav-divider.scss","bootstrap/mixins/_forms.scss","bootstrap/mixins/_progress-bar.scss","bootstrap/mixins/_table-row.scss","bootstrap/mixins/_background-variant.scss","bootstrap/mixins/_border-radius.scss","bootstrap/mixins/_gradients.scss","bootstrap/mixins/_clearfix.scss","bootstrap/mixins/_center-block.scss","bootstrap/mixins/_nav-vertical-align.scss","bootstrap/mixins/_grid-framework.scss","bootstrap/mixins/_grid.scss","components/_variables.scss","components/vars/_form.scss","components/vars/_nav.scss","components/vars/_layout.scss","components/vars/_elements.scss","components/vars/_widget.scss","components/_mixins.scss","components/mixins/_rtl.scss","components/mixins/_functions.scss","components/mixins/_template-mixins.scss"],"sourcesContent":["/*\r\nTheme Name: time\r\n\r\nAdding support for languages written in a Right To Left (RTL) direction is easy,\r\nit's just a matter of overwriting all the horizontal positioning attributes\r\nof your CSS stylesheet in a separate stylesheet file named rtl.css.\r\n\r\nhttps://codex.wordpress.org/Right-to-Left_Language_Support\r\n\r\n*/\r\n\r\n@import \"bootstrap/variables\";\r\n@import \"bootstrap/mixins\";\r\n@import \"components/variables\";\r\n@import \"components/mixins\";\r\n\r\n// Css code\r\n\r\n\r\n.rtl .owl-carousel .owl-wrapper-outer {\r\n  direction: ltr !important; }\r\n\r\n.rtl .owl-carousel .owl-item {\r\n  float: left; }","$bootstrap-sass-asset-helper: false !default;\n//\n// Variables\n// --------------------------------------------------\n\n\n//== Colors\n//\n//## Gray and brand colors for use across Bootstrap.\n\n$light-gray      : #5e6977 !default;       \n$very-light-gray : #e5e5e5 !default;                      // #e5e5e5\n$very-dark-gray  : #373737 !default;                     // #373737 \n$gray-darker     : #000000 !default;                      // #000000\n$gray-dark       : #444 !default;           // #333333\n$gray            : #969696 !default;         // #555555\n$gray-light      : #999999 !default;         // #777777\n$gray-lighter    : lighten(#000, 93.5%) !default;         // #eeeeee\n\n$brand-primary   : #b7e3e4 !default;\n$brand-success   : #4bbe69 !default;\n$brand-info      : #4797fa !default;\n$brand-warning   : #f0ad4e !default;\n$brand-danger    : #ee1a47 !default;\n\n\n//== Scaffolding\n//\n//## Settings for some of the most global styles.\n\n//** Background color for `<body>`.\n$body-bg:               #ffffff !default;\n//** Global text color on `<body>`.\n$text-color:            $gray-light !default;\n\n//** Global textual link color.\n$link-color:            #000000 !default;\n//** Link hover color set via `darken()` function.\n$link-hover-color:      $brand-primary !default;\n//** Link hover decoration.\n$link-hover-decoration: none !default;\n\n\n//== Typography\n//\n//## Font, line-height, and color for body text, headings, and more.\n\n$font-family-sans-serif: 'Poppins', sans-serif !default;\n$font-family-serif:      'Poppins', sans-serif !default;\n//** Default monospace fonts for `<code>`, `<kbd>`, and `<pre>`.\n$font-family-monospace:   \"Poppins\",sans-serif, monospace !default;\n$font-family-base:        'Poppins', sans-serif !default;\n\n$font-size-base:          14px !default;\n$font-size-large:         ceil(($font-size-base * 1)) !default; // ~18px\n$font-size-small:         ceil(($font-size-base * 0.75)) !default; // ~12px\n\n$font-size-h1:            30px !default; \n$font-size-h2:            24px !default;\n$font-size-h3:            18px !default;\n$font-size-h4:            16px !default;\n$font-size-h5:            14px !default;\n$font-size-h6:            12px !default;\n\n$font-weight-base\t: 400 !default;\n//** Unit-less `line-height` for use in components like buttons.\n$line-height-base:        1.8 !default; \n//** Computed \"line-height\" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.\n$line-height-computed:    floor(($font-size-base * $line-height-base)) !default; // ~20px\n\n//** By default, this inherits from the `<body>`.\n$headings-font-family:    $font-family-sans-serif !default;\n/* $headings-font-weight:    700 !default; */\n$headings-font-weight:    700 !default;\n$headings-line-height:    1.4 !default;\n$headings-color:          $gray-darker !default;\n\n\n//== Iconography\n//\n//## Specify custom location and filename of the included Glyphicons icon font. Useful for those including Bootstrap via Bower.\n\n//** Load fonts from this directory.\n\n// [converter] If $bootstrap-sass-asset-helper if used, provide path relative to the assets load path.\n// [converter] This is because some asset helpers, such as Sprockets, do not work with file-relative paths.\n$icon-font-path: if($bootstrap-sass-asset-helper, \"bootstrap/\", \"../fonts/bootstrap/\") !default;\n\n//** File name for all font files.\n$icon-font-name:          \"glyphicons-halflings-regular\" !default;\n//** Element ID within SVG icon file.\n$icon-font-svg-id:        \"glyphicons_halflingsregular\" !default;\n\n\n//== Components\n//\n//## Define common padding and border radius sizes and more. Values based on 14px text and 1.428 line-height (~20px to start).\n\n$padding-base-vertical:     8px !default;\n$padding-base-horizontal:   20px !default;\n\n$padding-large-vertical:    15px !default;\n$padding-large-horizontal:  20px !default;\n\n$padding-small-vertical:    10px !default;\n$padding-small-horizontal:  20px !default;\n\n$padding-xs-vertical:       7px !default;\n$padding-xs-horizontal:     10px !default;\n\n$line-height-large:         1.8 !default; // extra decimals for Win 8.1 Chrome\n$line-height-small:         1.5 !default;\n\n$border-radius-base:        4px !default;\n$border-radius-large:       8px !default;\n$border-radius-small:       0px !default;\n\n//** Global color for active items (e.g., navs or dropdowns).\n$component-active-color:    #fff !default;\n//** Global background color for active items (e.g., navs or dropdowns).\n$component-active-bg:       $brand-primary !default;\n\n//** Width of the `border` for generating carets that indicator dropdowns.\n$caret-width-base:          4px !default;\n//** Carets increase slightly in size for larger components.\n$caret-width-large:         5px !default;\n\n\n//== Tables\n//\n//## Customizes the `.table` component with basic values, each used across all table variations.\n\n//** Padding for `<th>`s and `<td>`s.\n$table-cell-padding:            8px !default;\n//** Padding for cells in `.table-condensed`.\n$table-condensed-cell-padding:  5px !default;\n\n//** Default background color used for all tables.\n$table-bg:                      transparent !default;\n//** Background color used for `.table-striped`.\n$table-bg-accent:               #f9f9f9 !default;\n//** Background color used for `.table-hover`.\n$table-bg-hover:                #f5f5f5 !default;\n$table-bg-active:               $table-bg-hover !default;\n\n//** Border color for table and cell borders.\n$table-border-color:            #ddd !default;\n\n\n//== Buttons\n//\n//## For each of Bootstrap's buttons, define text, background and border color.\n\n$btn-font-weight:                500 !default;\n\n$btn-default-color:              #000 !default;\n$btn-default-bg:                 transparent !default;\n$btn-default-border:             #000 !default;\n\n$btn-primary-color:              #000 !default;\n$btn-primary-bg:                 transparent !default;\n$btn-primary-border:             $brand-primary !default;\n\n$btn-success-color:              #000 !default;\n$btn-success-bg:                 transparent !default;\n$btn-success-border:             darken($btn-success-bg, 5%) !default;\n\n$btn-info-color:                 #000 !default;\n$btn-info-bg:                    transparent !default;\n$btn-info-border:                darken($btn-info-bg, 5%) !default;\n\n$btn-warning-color:              #000 !default;\n$btn-warning-bg:                 transparent !default;\n$btn-warning-border:             darken($btn-warning-bg, 5%) !default;\n\n$btn-danger-color:               #000 !default;\n$btn-danger-bg:                  transparent !default;\n$btn-danger-border:              darken($btn-danger-bg, 5%) !default;\n\n$btn-link-disabled-color:        $gray-light !default;\n\n// Allows for customizing button radius independently from global border radius\n$btn-border-radius-base:         8px !default;\n$btn-border-radius-large:        50px !default;\n$btn-border-radius-small:        0px !default;\n\n\n//== Forms\n//\n//##\n\n//** `<input>` background color\n$input-bg:                       #f9f9f9 !default;\n//** `<input disabled>` background color\n$input-bg-disabled:              $gray-lighter !default;\n\n//** Text color for `<input>`s\n$input-color:                    #000  !default;\n//** `<input>` border color\n$input-border:                   #f9f9f9 !default;\n\n// TODO: Rename `$input-border-radius` to `$input-border-radius-base` in v4\n//** Default `.form-control` border radius\n// This has no effect on `<select>`s in some browsers, due to the limited stylability of `<select>`s in CSS.\n$input-border-radius:            $border-radius-base !default;\n//** Large `.form-control` border radius\n$input-border-radius-large:      $border-radius-large !default;\n//** Small `.form-control` border radius\n$input-border-radius-small:      $border-radius-small !default;\n\n//** Border color for inputs on focus\n$input-border-focus:             $brand-primary !default;\n\n//** Placeholder text color\n$input-color-placeholder:        #000 !default;\n\n//** Default `.form-control` height\n$input-height-base:              42px !default;\n//** Large `.form-control` height\n$input-height-large:             (ceil($font-size-large * $line-height-large) + ($padding-large-vertical * 2) + 2) !default;\n//** Small `.form-control` height\n$input-height-small:             (floor($font-size-small * $line-height-small) + ($padding-small-vertical * 2) + 2) !default;\n\n//** `.form-group` margin\n$form-group-margin-bottom:       10px !default;\n\n$legend-color:                   $gray-dark !default;\n$legend-border-color:            #e5e5e5 !default;\n\n//** Background color for textual input addons\n$input-group-addon-bg:           $gray-lighter !default;\n//** Border color for textual input addons\n$input-group-addon-border-color: $input-border !default;\n\n//** Disabled cursor for form controls and buttons.\n$cursor-disabled:                not-allowed !default;\n\n\n//== Dropdowns\n//\n//## Dropdown menu container and contents.\n\n//** Background for the dropdown menu.\n$dropdown-bg:                    #fff !default;\n//** Dropdown menu `border-color`.\n$dropdown-border:                rgba(0,0,0,.15) !default;\n//** Dropdown menu `border-color` **for IE8**.\n$dropdown-fallback-border:       #ccc !default;\n//** Divider color for between dropdown items.\n$dropdown-divider-bg:            #e5e5e5 !default;\n\n//** Dropdown link text color.\n$dropdown-link-color:            $gray-dark !default;\n//** Hover color for dropdown links.\n$dropdown-link-hover-color:      darken($gray-dark, 5%) !default;\n//** Hover background for dropdown links.\n$dropdown-link-hover-bg:         #f5f5f5 !default;\n\n//** Active dropdown menu item text color.\n$dropdown-link-active-color:     $component-active-color !default;\n//** Active dropdown menu item background color.\n$dropdown-link-active-bg:        $component-active-bg !default;\n\n//** Disabled dropdown menu item background color.\n$dropdown-link-disabled-color:   $gray-light !default;\n\n//** Text color for headers within dropdown menus.\n$dropdown-header-color:          $gray-light !default;\n\n//** Deprecated `$dropdown-caret-color` as of v3.1.0\n$dropdown-caret-color:           #000 !default;\n\n\n//-- Z-index master list\n//\n// Warning: Avoid customizing these values. They're used for a bird's eye view\n// of components dependent on the z-axis and are designed to all work together.\n//\n// Note: These variables are not generated into the Customizer.\n\n$zindex-navbar:            1000 !default;\n$zindex-dropdown:          1000 !default;\n$zindex-popover:           1060 !default;\n$zindex-tooltip:           1070 !default;\n$zindex-navbar-fixed:      1030 !default;\n$zindex-modal-background:  1040 !default;\n$zindex-modal:             10500 !default;\n\n\n//== Media queries breakpoints\n//\n//## Define the breakpoints at which your layout will change, adapting to different screen sizes.\n\n// Extra small screen / phone\n//** Deprecated `$screen-xs` as of v3.0.1\n$screen-xs:                  480px !default;\n//** Deprecated `$screen-xs-min` as of v3.2.0\n$screen-xs-min:              $screen-xs !default;\n//** Deprecated `$screen-phone` as of v3.0.1\n$screen-phone:               $screen-xs-min !default;\n\n// Small screen / tablet\n//** Deprecated `$screen-sm` as of v3.0.1\n$screen-sm:                  768px !default;\n$screen-sm-min:              $screen-sm !default;\n//** Deprecated `$screen-tablet` as of v3.0.1\n$screen-tablet:              $screen-sm-min !default;\n\n// Medium screen / desktop\n//** Deprecated `$screen-md` as of v3.0.1\n$screen-md:                  992px !default;\n$screen-md-min:              $screen-md !default;\n//** Deprecated `$screen-desktop` as of v3.0.1\n$screen-desktop:             $screen-md-min !default;\n\n// Large screen / wide desktop\n//** Deprecated `$screen-lg` as of v3.0.1\n$screen-lg:                  1200px !default;\n$screen-lg-min:              $screen-lg !default;\n//** Deprecated `$screen-lg-desktop` as of v3.0.1\n$screen-lg-desktop:          $screen-lg-min !default;\n\n// So media queries don't overlap when required, provide a maximum\n$screen-xs-max:              ($screen-sm-min - 1) !default;\n$screen-sm-max:              ($screen-md-min - 1) !default;\n$screen-md-max:              ($screen-lg-min - 1) !default;\n\n//== Grid system\n//\n//## Define your custom responsive grid.\n\n//** Number of columns in the grid.\n$grid-columns:              12 !default;\n//** Padding between columns. Gets divided in half for the left and right.\n$grid-gutter-width:         30px !default;\n// Navbar collapse\n//** Point at which the navbar becomes uncollapsed.\n$grid-float-breakpoint:     $screen-sm-min !default;\n//** Point at which the navbar begins collapsing.\n$grid-float-breakpoint-max: ($grid-float-breakpoint - 1) !default;\n\n\n//== Container sizes\n//\n//## Define the maximum width of `.container` for different screen sizes.\n\n//## Define the maximum width of `.container` for different screen sizes.\n\n// Small screen / tablet\n$container-tablet:             ((738px + $grid-gutter-width)) !default;\n//** For `$screen-sm-min` and up.\n$container-sm:                 $container-tablet !default;\n\n// Medium screen / desktop\n$container-desktop:            ((962px + $grid-gutter-width)) !default;\n//** For `$screen-md-min` and up.\n$container-md:                 $container-desktop !default;\n\n// Large screen / wide desktop\n$container-large-desktop:      ((1170px + $grid-gutter-width) ) !default;\n//** For `$screen-lg-min` and up.\n$container-lg:                 $container-large-desktop !default;\n\n\n\n//== Navbar\n//\n//##\n\n// Basics of a navbar\n$navbar-height:                    50px !default;\n$navbar-margin-bottom:             0 !default;\n$navbar-border-radius:             $border-radius-base !default;\n$navbar-padding-horizontal:        floor(($grid-gutter-width / 2)) !default;\n$navbar-padding-vertical:          (($navbar-height - $line-height-computed) / 2) !default;\n$navbar-collapse-max-height:       340px !default;\n\n$navbar-default-color:             #777 !default;\n$navbar-default-bg:                #f8f8f8 !default;\n$navbar-default-border:            darken($navbar-default-bg, 6.5%) !default;\n\n// Navbar links\n$navbar-default-link-color:                #777 !default;\n$navbar-default-link-hover-color:          #333 !default;\n$navbar-default-link-hover-bg:             transparent !default;\n$navbar-default-link-active-color:         #555 !default;\n$navbar-default-link-active-bg:            darken($navbar-default-bg, 6.5%) !default;\n$navbar-default-link-disabled-color:       #ccc !default;\n$navbar-default-link-disabled-bg:          transparent !default;\n\n// Navbar brand label\n$navbar-default-brand-color:               $navbar-default-link-color !default;\n$navbar-default-brand-hover-color:         darken($navbar-default-brand-color, 10%) !default;\n$navbar-default-brand-hover-bg:            transparent !default;\n\n// Navbar toggle\n$navbar-default-toggle-hover-bg:           #ddd !default;\n$navbar-default-toggle-icon-bar-bg:        #888 !default;\n$navbar-default-toggle-border-color:       #ddd !default;\n\n\n//=== Inverted navbar\n// Reset inverted navbar basics\n$navbar-inverse-color:                      lighten($gray-light, 15%) !default;\n$navbar-inverse-bg:                         #222 !default;\n$navbar-inverse-border:                     darken($navbar-inverse-bg, 10%) !default;\n\n// Inverted navbar links\n$navbar-inverse-link-color:                 lighten($gray-light, 15%) !default;\n$navbar-inverse-link-hover-color:           #fff !default;\n$navbar-inverse-link-hover-bg:              transparent !default;\n$navbar-inverse-link-active-color:          $navbar-inverse-link-hover-color !default;\n$navbar-inverse-link-active-bg:             darken($navbar-inverse-bg, 10%) !default;\n$navbar-inverse-link-disabled-color:        #444 !default;\n$navbar-inverse-link-disabled-bg:           transparent !default;\n\n// Inverted navbar brand label\n$navbar-inverse-brand-color:                $navbar-inverse-link-color !default;\n$navbar-inverse-brand-hover-color:          #fff !default;\n$navbar-inverse-brand-hover-bg:             transparent !default;\n\n// Inverted navbar toggle\n$navbar-inverse-toggle-hover-bg:            #333 !default;\n$navbar-inverse-toggle-icon-bar-bg:         #fff !default;\n$navbar-inverse-toggle-border-color:        #333 !default;\n\n\n//== Navs\n//\n//##\n\n//=== Shared nav styles\n$nav-link-padding:                          10px 15px !default;\n$nav-link-hover-bg:                         transparent !default;\n\n$nav-disabled-link-color:                   $gray-light !default;\n$nav-disabled-link-hover-color:             $gray-light !default;\n\n//== Tabs\n$nav-tabs-border-color:                     transparent !default;\n\n$nav-tabs-link-hover-border-color:          transparent !default;\n\n$nav-tabs-active-link-hover-bg:             transparent !default;\n$nav-tabs-active-link-hover-color:          $brand-primary !default;\n$nav-tabs-active-link-hover-border-color:   transparent !default;\n\n$nav-tabs-justified-link-border-color:            #ddd !default;\n$nav-tabs-justified-active-link-border-color:     $body-bg !default;\n\n//== Pills\n$nav-pills-border-radius:                   $border-radius-base !default;\n$nav-pills-active-link-hover-bg:            $component-active-bg !default;\n$nav-pills-active-link-hover-color:         $component-active-color !default;\n\n\n//== Pagination\n//\n//##\n\n$pagination-color:                     $link-color !default;\n$pagination-bg:                        #fff !default;\n$pagination-border:                    #ddd !default;\n\n$pagination-hover-color:               $link-hover-color !default;\n$pagination-hover-bg:                  $gray-lighter !default;\n$pagination-hover-border:              #ddd !default;\n\n$pagination-active-color:              #fff !default;\n$pagination-active-bg:                 $brand-primary !default;\n$pagination-active-border:             $brand-primary !default;\n\n$pagination-disabled-color:            $gray-light !default;\n$pagination-disabled-bg:               #fff !default;\n$pagination-disabled-border:           #ddd !default;\n\n\n//== Pager\n//\n//##\n\n$pager-bg:                             $pagination-bg !default;\n$pager-border:                         $pagination-border !default;\n$pager-border-radius:                  15px !default;\n\n$pager-hover-bg:                       $pagination-hover-bg !default;\n\n$pager-active-bg:                      $pagination-active-bg !default;\n$pager-active-color:                   $pagination-active-color !default;\n\n$pager-disabled-color:                 $pagination-disabled-color !default;\n\n\n//== Jumbotron\n//\n//##\n\n$jumbotron-padding:              30px !default;\n$jumbotron-color:                inherit !default;\n$jumbotron-bg:                   $gray-lighter !default;\n$jumbotron-heading-color:        inherit !default;\n$jumbotron-font-size:            ceil(($font-size-base * 1.5)) !default;\n$jumbotron-heading-font-size:    ceil(($font-size-base * 4.5)) !default;\n\n\n//== Form states and alerts\n//\n//## Define colors for form feedback states and, by default, alerts.\n\n$state-success-text:             #3c763d !default;\n$state-success-bg:               #dff0d8 !default;\n$state-success-border:           darken(adjust-hue($state-success-bg, -10), 5%) !default;\n\n$state-info-text:                #31708f !default;\n$state-info-bg:                  #d9edf7 !default;\n$state-info-border:              darken(adjust-hue($state-info-bg, -10), 7%) !default;\n\n$state-warning-text:             #8a6d3b !default;\n$state-warning-bg:               #f0c73b !default;\n$state-warning-border:           darken(adjust-hue($state-warning-bg, -10), 5%) !default;\n\n$state-danger-text:              #a94442 !default;\n$state-danger-bg:                #e93434 !default;\n$state-danger-border:            darken(adjust-hue($state-danger-bg, -10), 5%) !default;\n\n\n//== Tooltips\n//\n//##\n\n//** Tooltip max width\n$tooltip-max-width:           200px !default;\n//** Tooltip text color\n$tooltip-color:               #fff !default;\n//** Tooltip background color\n$tooltip-bg:                  #000 !default;\n$tooltip-opacity:             .9 !default;\n\n//** Tooltip arrow width\n$tooltip-arrow-width:         5px !default;\n//** Tooltip arrow color\n$tooltip-arrow-color:         $tooltip-bg !default;\n\n\n//== Popovers\n//\n//##\n\n//** Popover body background color\n$popover-bg:                          #fff !default;\n//** Popover maximum width\n$popover-max-width:                   276px !default;\n//** Popover border color\n$popover-border-color:                rgba(0,0,0,.2) !default;\n//** Popover fallback border color\n$popover-fallback-border-color:       #ccc !default;\n\n//** Popover title background color\n$popover-title-bg:                    darken($popover-bg, 3%) !default;\n\n//** Popover arrow width\n$popover-arrow-width:                 10px !default;\n//** Popover arrow color\n$popover-arrow-color:                 $popover-bg !default;\n\n//** Popover outer arrow width\n$popover-arrow-outer-width:           ($popover-arrow-width + 1) !default;\n//** Popover outer arrow color\n$popover-arrow-outer-color:           fade_in($popover-border-color, 0.05) !default;\n//** Popover outer arrow fallback color\n$popover-arrow-outer-fallback-color:  darken($popover-fallback-border-color, 20%) !default;\n\n\n//== Labels\n//\n//##\n\n//** Default label background color\n$label-default-bg:            $gray-light !default;\n//** Primary label background color\n$label-primary-bg:            $brand-primary !default;\n//** Success label background color\n$label-success-bg:            $brand-success !default;\n//** Info label background color\n$label-info-bg:               $brand-info !default;\n//** Warning label background color\n$label-warning-bg:            $brand-warning !default;\n//** Danger label background color\n$label-danger-bg:             $brand-danger !default;\n\n//** Default label text color\n$label-color:                 #000 !default;\n//** Default text color of a linked label\n$label-link-hover-color:      $brand-primary !default;\n\n\n//== Modals\n//\n//##\n\n//** Padding applied to the modal body\n$modal-inner-padding:         30px !default;\n\n//** Padding applied to the modal title\n$modal-title-padding:         15px !default;\n//** Modal title line-height\n$modal-title-line-height:     $line-height-base !default;\n\n//** Background color of modal content area\n$modal-content-bg:                             #fff !default;\n//** Modal content border color\n$modal-content-border-color:                   $brand-primary !default;\n//** Modal content border color **for IE8**\n$modal-content-fallback-border-color:          #999 !default;\n\n//** Modal backdrop background color\n$modal-backdrop-bg:           #000 !default;\n//** Modal backdrop opacity\n$modal-backdrop-opacity:      .5 !default;\n//** Modal header border color\n$modal-header-border-color:   #e5e5e5 !default;\n//** Modal footer border color\n$modal-footer-border-color:   $modal-header-border-color !default;\n\n$modal-lg:                    900px !default;\n$modal-md:                    600px !default;\n$modal-sm:                    300px !default;\n\n\n//== Alerts\n//\n//## Define alert colors, border radius, and padding.\n\n$alert-padding:               15px !default;\n$alert-border-radius:         $border-radius-base !default;\n$alert-link-font-weight:      bold !default;\n\n$alert-success-bg:            $state-success-bg !default;\n$alert-success-text:          $state-success-text !default;\n$alert-success-border:        $state-success-border !default;\n\n$alert-info-bg:               $state-info-bg !default;\n$alert-info-text:             $state-info-text !default;\n$alert-info-border:           $state-info-border !default;\n\n$alert-warning-bg:            $state-warning-bg !default;\n$alert-warning-text:          $state-warning-text !default;\n$alert-warning-border:        $state-warning-border !default;\n\n$alert-danger-bg:             $state-danger-bg !default;\n$alert-danger-text:           $state-danger-text !default;\n$alert-danger-border:         $state-danger-border !default;\n\n\n//== Progress bars\n//\n//##\n\n//** Background color of the whole progress component\n$progress-bg:                 #f5f5f5 !default;\n//** Progress bar text color\n$progress-bar-color:          #fff !default;\n//** Variable for setting rounded corners on progress bar.\n$progress-border-radius:      $border-radius-base !default;\n\n//** Default progress bar color\n$progress-bar-bg:             $brand-primary !default;\n//** Success progress bar color\n$progress-bar-success-bg:     $brand-success !default;\n//** Warning progress bar color\n$progress-bar-warning-bg:     $brand-warning !default;\n//** Danger progress bar color\n$progress-bar-danger-bg:      $brand-danger !default;\n//** Info progress bar color\n$progress-bar-info-bg:        $brand-info !default;\n\n\n//== List group\n//\n//##\n\n//** Background color on `.list-group-item`\n$list-group-bg:                 #fff !default;\n//** `.list-group-item` border color\n$list-group-border:             #ddd !default;\n//** List group border radius\n$list-group-border-radius:      $border-radius-base !default;\n\n//** Background color of single list items on hover\n$list-group-hover-bg:           #f5f5f5 !default;\n//** Text color of active list items\n$list-group-active-color:       $component-active-color !default;\n//** Background color of active list items\n$list-group-active-bg:          $component-active-bg !default;\n//** Border color of active list elements\n$list-group-active-border:      $list-group-active-bg !default;\n//** Text color for content within active list items\n$list-group-active-text-color:  lighten($list-group-active-bg, 40%) !default;\n\n//** Text color of disabled list items\n$list-group-disabled-color:      $gray-light !default;\n//** Background color of disabled list items\n$list-group-disabled-bg:         $gray-lighter !default;\n//** Text color for content within disabled list items\n$list-group-disabled-text-color: $list-group-disabled-color !default;\n\n$list-group-link-color:         #555 !default;\n$list-group-link-hover-color:   $list-group-link-color !default;\n$list-group-link-heading-color: #333 !default;\n\n\n//== Panels\n//\n//##\n\n$panel-bg:                    #fff !default;\n$panel-body-padding:          20px !default;\n$panel-heading-padding:       15px 20px !default;\n$panel-footer-padding:        $panel-heading-padding !default;\n$panel-border-radius:         $border-radius-base !default;\n\n//** Border color for elements within panels\n$panel-inner-border:          transparent !default;\n$panel-footer-bg:             #f5f5f5 !default;\n\n$panel-default-text:          $gray-dark !default;\n$panel-default-border:        #ededed !default;\n$panel-default-heading-bg:    #f5f5f5 !default;\n\n$panel-primary-text:          #fff !default;\n$panel-primary-border:        $brand-primary !default;\n$panel-primary-heading-bg:    $brand-primary !default;\n\n$panel-success-text:          $state-success-text !default;\n$panel-success-border:        $state-success-border !default;\n$panel-success-heading-bg:    $state-success-bg !default;\n\n$panel-info-text:             $state-info-text !default;\n$panel-info-border:           $state-info-border !default;\n$panel-info-heading-bg:       $state-info-bg !default;\n\n$panel-warning-text:          $state-warning-text !default;\n$panel-warning-border:        $state-warning-border !default;\n$panel-warning-heading-bg:    $state-warning-bg !default;\n\n$panel-danger-text:           $state-danger-text !default;\n$panel-danger-border:         $state-danger-border !default;\n$panel-danger-heading-bg:     $state-danger-bg !default;\n\n\n//== Thumbnails\n//\n//##\n\n//** Padding around the thumbnail image\n$thumbnail-padding:           4px !default;\n//** Thumbnail background color\n$thumbnail-bg:                $body-bg !default;\n//** Thumbnail border color\n$thumbnail-border:            #ddd !default;\n//** Thumbnail border radius\n$thumbnail-border-radius:     $border-radius-base !default;\n\n//** Custom text color for thumbnail captions\n$thumbnail-caption-color:     $text-color !default;\n//** Padding around the thumbnail caption\n$thumbnail-caption-padding:   9px !default;\n\n\n//== Wells\n//\n//##\n\n$well-bg:                     #f5f5f5 !default;\n$well-border:                 darken($well-bg, 7%) !default;\n\n\n//== Badges\n//\n//##\n\n$badge-color:                 #fff !default;\n//** Linked badge text color on hover\n$badge-link-hover-color:      #fff !default;\n$badge-bg:                    $gray-light !default;\n\n//** Badge text color in active nav link\n$badge-active-color:          $link-color !default;\n//** Badge background color in active nav link\n$badge-active-bg:             #fff !default;\n\n$badge-font-weight:           bold !default;\n$badge-line-height:           1 !default;\n$badge-border-radius:         10px !default;\n\n\n//== Breadcrumbs\n//\n//##\n\n$breadcrumb-padding-vertical:   0 !default;\n$breadcrumb-padding-horizontal: 0 !default;\n//** Breadcrumb background color\n$breadcrumb-bg:                 transparent !default;\n//** Breadcrumb text color\n$breadcrumb-color:              #fff !default;\n//** Text color of current page in the breadcrumb\n$breadcrumb-active-color:       $brand-primary !default;\n//** Textual separator for between breadcrumb elements\n$breadcrumb-separator:          \"/\" !default;\n\n\n//== Carousel\n//\n//##\n\n$carousel-text-shadow:                        0 1px 2px rgba(0,0,0,.6) !default;\n\n$carousel-control-color:                      #000 !default;\n$carousel-control-width:                      35px !default;\n$carousel-control-opacity:                    .5 !default;\n$carousel-control-font-size:                  11px !default;\n\n$carousel-indicator-active-bg:                #fff !default;\n$carousel-indicator-border-color:             #ededed !default;\n\n$carousel-caption-color:                      #fff !default;\n\n\n//== Close\n//\n//##\n\n$close-font-weight:           bold !default;\n$close-color:                 #000 !default;\n$close-text-shadow:           0 1px 0 #fff !default;\n\n\n//== Code\n//\n//##\n\n$code-color:                  #c7254e !default;\n$code-bg:                     #f9f2f4 !default;\n\n$kbd-color:                   #fff !default;\n$kbd-bg:                      #333 !default;\n\n$pre-bg:                      #f5f5f5 !default;\n$pre-color:                   $gray-dark !default;\n$pre-border-color:            #ccc !default;\n$pre-scrollable-max-height:   340px !default;\n\n\n//== Type\n//\n//##\n\n//** Horizontal offset for forms and lists.\n$component-offset-horizontal: 180px !default;\n//** Text muted color\n$text-muted:                  $gray-light !default;\n//** Abbreviations and acronyms border color\n$abbr-border-color:           $gray-light !default;\n//** Headings small color\n$headings-small-color:        $gray-light !default;\n//** Blockquote small color\n$blockquote-small-color:      $gray-light !default;\n//** Blockquote font size\n$blockquote-font-size:        ($font-size-base * 1.5) !default;\n//** Blockquote border color\n$blockquote-border-color:     $brand-warning !default;\n//** Page header border color\n$page-header-border-color:    $gray-lighter !default;\n//** Width of horizontal description list titles\n$dl-horizontal-offset:        $component-offset-horizontal !default;\n//** Horizontal line color.\n$hr-border:                   $gray-lighter !default;\n","// Mixins\n// --------------------------------------------------\n\n// Utilities\n@import \"mixins/hide-text\";\n@import \"mixins/opacity\";\n@import \"mixins/image\";\n@import \"mixins/labels\";\n@import \"mixins/reset-filter\";\n@import \"mixins/resize\";\n@import \"mixins/responsive-visibility\";\n@import \"mixins/size\";\n@import \"mixins/tab-focus\";\n@import \"mixins/reset-text\";\n@import \"mixins/text-emphasis\";\n@import \"mixins/text-overflow\";\n@import \"mixins/vendor-prefixes\";\n\n// Components\n@import \"mixins/alerts\";\n@import \"mixins/buttons\";\n@import \"mixins/panels\";\n@import \"mixins/pagination\";\n@import \"mixins/list-group\";\n@import \"mixins/nav-divider\";\n@import \"mixins/forms\";\n@import \"mixins/progress-bar\";\n@import \"mixins/table-row\";\n\n// Skins\n@import \"mixins/background-variant\";\n@import \"mixins/border-radius\";\n@import \"mixins/gradients\";\n\n// Layout\n@import \"mixins/clearfix\";\n@import \"mixins/center-block\";\n@import \"mixins/nav-vertical-align\";\n@import \"mixins/grid-framework\";\n@import \"mixins/grid\";\n","// CSS image replacement\n//\n// Heads up! v3 launched with only `.hide-text()`, but per our pattern for\n// mixins being reused as classes with the same name, this doesn't hold up. As\n// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`.\n//\n// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757\n\n// Deprecated as of v3.0.1 (will be removed in v4)\n@mixin hide-text() {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n// New mixin to use as of v3.0.1\n@mixin text-hide() {\n  @include hide-text;\n}\n","// Opacity\n\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  // IE8 filter\n  $opacity-ie: ($opacity * 100);\n  filter: alpha(opacity=$opacity-ie);\n}\n","// Image Mixins\n// - Responsive image\n// - Retina image\n\n\n// Responsive image\n//\n// Keep images from scaling beyond the width of their parents.\n@mixin img-responsive($display: block) {\n  display: $display;\n  max-width: 100%; // Part 1: Set a maximum relative to the parent\n  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching\n}\n\n\n// Retina image\n//\n// Short retina mixin for setting background-image and -size. Note that the\n// spelling of `min--moz-device-pixel-ratio` is intentional.\n@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {\n  background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path(\"#{$file-1x}\"), \"#{$file-1x}\"));\n\n  @media\n  only screen and (-webkit-min-device-pixel-ratio: 2),\n  only screen and (   min--moz-device-pixel-ratio: 2),\n  only screen and (     -o-min-device-pixel-ratio: 2/1),\n  only screen and (        min-device-pixel-ratio: 2),\n  only screen and (                min-resolution: 192dpi),\n  only screen and (                min-resolution: 2dppx) {\n    background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path(\"#{$file-2x}\"), \"#{$file-2x}\"));\n    background-size: $width-1x $height-1x;\n  }\n}\n","// Labels\n\n@mixin label-variant($color) {\n  background-color: $color;\n\n  &[href] {\n    &:hover,\n    &:focus {\n      background-color: darken($color, 10%);\n    }\n  }\n}\n","// Reset filters for IE\n//\n// When you need to remove a gradient background, do not forget to use this to reset\n// the IE filter for IE9 and below.\n\n@mixin reset-filter() {\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n","// Resize anything\n\n@mixin resizable($direction) {\n  resize: $direction; // Options: horizontal, vertical, both\n  overflow: auto; // Per CSS3 UI, `resize` only applies when `overflow` isn't `visible`\n}\n","// Responsive utilities\n\n//\n// More easily include all the states for responsive-utilities.less.\n// [converter] $parent hack\n@mixin responsive-visibility($parent) {\n  #{$parent} {\n    display: block !important;\n  }\n  table#{$parent}  { display: table !important; }\n  tr#{$parent}     { display: table-row !important; }\n  th#{$parent},\n  td#{$parent}     { display: table-cell !important; }\n}\n\n// [converter] $parent hack\n@mixin responsive-invisibility($parent) {\n  #{$parent} {\n    display: none !important;\n  }\n}\n","// Sizing shortcuts\n\n@mixin size($width, $height) {\n  width: $width;\n  height: $height;\n}\n\n@mixin square($size) {\n  @include size($size, $size);\n}\n","// WebKit-style focus\n\n@mixin tab-focus() {\n  // Default\n  outline: none;\n  // WebKit\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n","@mixin reset-text() {\n  font-family: $font-family-base;\n  // We deliberately do NOT reset font-size.\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: $line-height-base;\n  text-align: left; // Fallback for where `start` is not supported\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n}\n","// Typography\n\n// [converter] $parent hack\n@mixin text-emphasis-variant($parent, $color) {\n  #{$parent} {\n    color: $color;\n  }\n  a#{$parent}:hover,\n  a#{$parent}:focus {\n    color: darken($color, 10%);\n  }\n}\n","// Text overflow\n// Requires inline-block or block for proper styling\n\n@mixin text-overflow() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n","// Vendor Prefixes\n//\n// All vendor mixins are deprecated as of v3.2.0 due to the introduction of\n// Autoprefixer in our Gruntfile. They will be removed in v4.\n\n// - Animations\n// - Backface visibility\n// - Box shadow\n// - Box sizing\n// - Content columns\n// - Hyphens\n// - Placeholder text\n// - Transformations\n// - Transitions\n// - User Select\n\n\n// Animations\n@mixin animation($animation) {\n  -webkit-animation: $animation;\n       -o-animation: $animation;\n          animation: $animation;\n}\n@mixin animation-name($name) {\n  -webkit-animation-name: $name;\n          animation-name: $name;\n}\n@mixin animation-duration($duration) {\n  -webkit-animation-duration: $duration;\n          animation-duration: $duration;\n}\n@mixin animation-timing-function($timing-function) {\n  -webkit-animation-timing-function: $timing-function;\n          animation-timing-function: $timing-function;\n}\n@mixin animation-delay($delay) {\n  -webkit-animation-delay: $delay;\n          animation-delay: $delay;\n}\n@mixin animation-iteration-count($iteration-count) {\n  -webkit-animation-iteration-count: $iteration-count;\n          animation-iteration-count: $iteration-count;\n}\n@mixin animation-direction($direction) {\n  -webkit-animation-direction: $direction;\n          animation-direction: $direction;\n}\n@mixin animation-fill-mode($fill-mode) {\n  -webkit-animation-fill-mode: $fill-mode;\n          animation-fill-mode: $fill-mode;\n}\n\n// Backface visibility\n// Prevent browsers from flickering when using CSS 3D transforms.\n// Default value is `visible`, but can be changed to `hidden`\n\n@mixin backface-visibility($visibility){\n  -webkit-backface-visibility: $visibility;\n     -moz-backface-visibility: $visibility;\n          backface-visibility: $visibility;\n}\n\n// Drop shadows\n//\n// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's\n// supported browsers that have box shadow capabilities now support it.\n\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1\n          box-shadow: $shadow;\n}\n\n// Box sizing\n@mixin box-sizing($boxmodel) {\n  -webkit-box-sizing: $boxmodel;\n     -moz-box-sizing: $boxmodel;\n          box-sizing: $boxmodel;\n}\n\n// CSS3 Content Columns\n@mixin content-columns($column-count, $column-gap: $grid-gutter-width) {\n  -webkit-column-count: $column-count;\n     -moz-column-count: $column-count;\n          column-count: $column-count;\n  -webkit-column-gap: $column-gap;\n     -moz-column-gap: $column-gap;\n          column-gap: $column-gap;\n}\n\n// Optional hyphenation\n@mixin hyphens($mode: auto) {\n  word-wrap: break-word;\n  -webkit-hyphens: $mode;\n     -moz-hyphens: $mode;\n      -ms-hyphens: $mode; // IE10+\n       -o-hyphens: $mode;\n          hyphens: $mode;\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-color-placeholder) {\n  // Firefox\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+\n  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome\n}\n\n// Transformations\n@mixin scale($ratio...) {\n  -webkit-transform: scale($ratio);\n      -ms-transform: scale($ratio); // IE9 only\n       -o-transform: scale($ratio);\n          transform: scale($ratio);\n}\n\n@mixin scaleX($ratio) {\n  -webkit-transform: scaleX($ratio);\n      -ms-transform: scaleX($ratio); // IE9 only\n       -o-transform: scaleX($ratio);\n          transform: scaleX($ratio);\n}\n@mixin scaleY($ratio) {\n  -webkit-transform: scaleY($ratio);\n      -ms-transform: scaleY($ratio); // IE9 only\n       -o-transform: scaleY($ratio);\n          transform: scaleY($ratio);\n}\n@mixin skew($x, $y) {\n  -webkit-transform: skewX($x) skewY($y);\n      -ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+\n       -o-transform: skewX($x) skewY($y);\n          transform: skewX($x) skewY($y);\n}\n@mixin translate($x, $y) {\n  -webkit-transform: translate($x, $y);\n      -ms-transform: translate($x, $y); // IE9 only\n       -o-transform: translate($x, $y);\n          transform: translate($x, $y);\n}\n@mixin translate3d($x, $y, $z) {\n  -webkit-transform: translate3d($x, $y, $z);\n          transform: translate3d($x, $y, $z);\n}\n@mixin rotate($degrees) {\n  -webkit-transform: rotate($degrees);\n      -ms-transform: rotate($degrees); // IE9 only\n       -o-transform: rotate($degrees);\n          transform: rotate($degrees);\n}\n@mixin rotateX($degrees) {\n  -webkit-transform: rotateX($degrees);\n      -ms-transform: rotateX($degrees); // IE9 only\n       -o-transform: rotateX($degrees);\n          transform: rotateX($degrees);\n}\n@mixin rotateY($degrees) {\n  -webkit-transform: rotateY($degrees);\n      -ms-transform: rotateY($degrees); // IE9 only\n       -o-transform: rotateY($degrees);\n          transform: rotateY($degrees);\n}\n@mixin perspective($perspective) {\n  -webkit-perspective: $perspective;\n     -moz-perspective: $perspective;\n          perspective: $perspective;\n}\n@mixin perspective-origin($perspective) {\n  -webkit-perspective-origin: $perspective;\n     -moz-perspective-origin: $perspective;\n          perspective-origin: $perspective;\n}\n@mixin transform-origin($origin) {\n  -webkit-transform-origin: $origin;\n     -moz-transform-origin: $origin;\n      -ms-transform-origin: $origin; // IE9 only\n          transform-origin: $origin;\n}\n\n\n// Transitions\n\n@mixin transition($transition...) {\n  -webkit-transition: $transition;\n       -o-transition: $transition;\n          transition: $transition;\n}\n@mixin transition-property($transition-property...) {\n  -webkit-transition-property: $transition-property;\n          transition-property: $transition-property;\n}\n@mixin transition-delay($transition-delay) {\n  -webkit-transition-delay: $transition-delay;\n          transition-delay: $transition-delay;\n}\n@mixin transition-duration($transition-duration...) {\n  -webkit-transition-duration: $transition-duration;\n          transition-duration: $transition-duration;\n}\n@mixin transition-timing-function($timing-function) {\n  -webkit-transition-timing-function: $timing-function;\n          transition-timing-function: $timing-function;\n}\n@mixin transition-transform($transition...) {\n  -webkit-transition: -webkit-transform $transition;\n     -moz-transition: -moz-transform $transition;\n       -o-transition: -o-transform $transition;\n          transition: transform $transition;\n}\n\n\n// User select\n// For selecting text on the page\n\n@mixin user-select($select) {\n  -webkit-user-select: $select;\n     -moz-user-select: $select;\n      -ms-user-select: $select; // IE10+\n          user-select: $select;\n}\n","// Alerts\n\n@mixin alert-variant($background, $border, $text-color) {\n  background-color: $background;\n  border-color: $border;\n  color: $text-color;\n\n  hr {\n    border-top-color: darken($border, 5%);\n  }\n  .alert-link {\n    color: darken($text-color, 10%);\n  }\n}\n","// Button variants\n//\n// Easily pump out default styles, as well as :hover, :focus, :active,\n// and disabled options for all buttons\n\n@mixin button-variant($color, $background, $border) {\n  color: $color;\n  background-color: $background;\n  border-color: $border;\n\n  &:focus,\n  &.focus {\n    color: $color;\n    background-color: darken($background, 10%);\n        border-color: darken($border, 25%);\n  }\n  &:hover {\n    color: $color;\n    background-color: darken($background, 10%);\n    border-color: darken($border, 12%);\n  }\n  &:active,\n  &.active,\n  .open > &.dropdown-toggle {\n    color: $color;\n    background-color: darken($background, 10%);\n        border-color: darken($border, 12%);\n\n    &:hover,\n    &:focus,\n    &.focus {\n      color: $color;\n      background-color: darken($background, 17%);\n          border-color: darken($border, 25%);\n    }\n  }\n  &:active,\n  &.active,\n  .open > &.dropdown-toggle {\n    background-image: none;\n  }\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    &,\n    &:hover,\n    &:focus,\n    &.focus,\n    &:active,\n    &.active {\n      background-color: $background;\n          border-color: $border;\n    }\n  }\n\n  .badge {\n    color: $background;\n    background-color: $color;\n  }\n}\n\n// Button sizes\n@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  padding: $padding-vertical $padding-horizontal;\n  font-size: $font-size;\n  line-height: $line-height;\n  border-radius: $border-radius;\n}\n","// Panels\n\n@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {\n  border-color: $border;\n\n  & > .panel-heading {\n    color: $heading-text-color;\n    background-color: $heading-bg-color;\n    border-color: $heading-border;\n\n    + .panel-collapse > .panel-body {\n      border-top-color: $border;\n    }\n    .badge {\n      color: $heading-bg-color;\n      background-color: $heading-text-color;\n    }\n  }\n  & > .panel-footer {\n    + .panel-collapse > .panel-body {\n      border-bottom-color: $border;\n    }\n  }\n}\n","// Pagination\n\n@mixin pagination-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  > li {\n    > a,\n    > span {\n      padding: $padding-vertical $padding-horizontal;\n      font-size: $font-size;\n      line-height: $line-height;\n    }\n    &:first-child {\n      > a,\n      > span {\n        @include border-left-radius($border-radius);\n      }\n    }\n    &:last-child {\n      > a,\n      > span {\n        @include border-right-radius($border-radius);\n      }\n    }\n  }\n}\n","// List Groups\n\n@mixin list-group-item-variant($state, $background, $color) {\n  .list-group-item-#{$state} {\n    color: $color;\n    background-color: $background;\n\n    // [converter] extracted a&, button& to a.list-group-item-#{$state}, button.list-group-item-#{$state}\n  }\n\n  a.list-group-item-#{$state},\n  button.list-group-item-#{$state} {\n    color: $color;\n\n    .list-group-item-heading {\n      color: inherit;\n    }\n\n    &:hover,\n    &:focus {\n      color: $color;\n      background-color: darken($background, 5%);\n    }\n    &.active,\n    &.active:hover,\n    &.active:focus {\n      color: #fff;\n      background-color: $color;\n      border-color: $color;\n    }\n  }\n}\n","// Horizontal dividers\n//\n// Dividers (basically an hr) within dropdowns and nav lists\n\n@mixin nav-divider($color: #e5e5e5) {\n  height: 1px;\n  margin: (($line-height-computed / 2) - 1) 0;\n  overflow: hidden;\n  background-color: $color;\n}\n","// Form validation states\n//\n// Used in forms.less to generate the form validation CSS for warnings, errors,\n// and successes.\n\n@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {\n  // Color the label and help text\n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: $text-color;\n  }\n  // Set the border and box shadow on specific inputs to match\n  .form-control {\n    border-color: $border-color;\n    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work\n    &:focus {\n      border-color: darken($border-color, 10%);\n      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);\n      @include box-shadow($shadow);\n    }\n  }\n  // Set validation states also for addons\n  .input-group-addon {\n    color: $text-color;\n    border-color: $border-color;\n    background-color: $background-color;\n  }\n  // Optional feedback icon\n  .form-control-feedback {\n    color: $text-color;\n  }\n}\n\n\n// Form control focus state\n//\n// Generate a customized focus state and for any input with the specified color,\n// which defaults to the `$input-border-focus` variable.\n//\n// We highly encourage you to not customize the default value, but instead use\n// this to tweak colors on an as-needed basis. This aesthetic change is based on\n// WebKit's default styles, but applicable to a wider range of browsers. Its\n// usability and accessibility should be taken into account with any change.\n//\n// Example usage: change the default blue border and shadow to white for better\n// contrast against a dark gray background.\n@mixin form-control-focus($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0;\n    @include box-shadow(none);\n  }\n}\n\n// Form control sizing\n//\n// Relative text size, padding, and border-radii changes for form controls. For\n// horizontal sizing, wrap controls in the predefined grid classes. `<select>`\n// element gets special love because it's special, and that's a fact!\n// [converter] $parent hack\n@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  #{$parent} {\n    height: $input-height;\n    padding: $padding-vertical $padding-horizontal;\n    font-size: $font-size;\n    line-height: $line-height;\n    border-radius: $border-radius;\n  }\n\n  select#{$parent} {\n    height: $input-height;\n    line-height: $input-height;\n  }\n\n  textarea#{$parent},\n  select[multiple]#{$parent} {\n    height: auto;\n  }\n}\n","// Progress bars\n\n@mixin progress-bar-variant($color) {\n  background-color: $color;\n\n  // Deprecated parent class requirement as of v3.2.0\n  .progress-striped & {\n    @include gradient-striped;\n  }\n}\n","// Tables\n\n@mixin table-row-variant($state, $background) {\n  // Exact selectors below required to override `.table-striped` and prevent\n  // inheritance to nested tables.\n  .table > thead > tr,\n  .table > tbody > tr,\n  .table > tfoot > tr {\n    > td.#{$state},\n    > th.#{$state},\n    &.#{$state} > td,\n    &.#{$state} > th {\n      background-color: $background;\n    }\n  }\n\n  // Hover states for `.table-hover`\n  // Note: this is not available for cells or rows within `thead` or `tfoot`.\n  .table-hover > tbody > tr {\n    > td.#{$state}:hover,\n    > th.#{$state}:hover,\n    &.#{$state}:hover > td,\n    &:hover > .#{$state},\n    &.#{$state}:hover > th {\n      background-color: darken($background, 5%);\n    }\n  }\n}\n","// Contextual backgrounds\n\n// [converter] $parent hack\n@mixin bg-variant($parent, $color) {\n  #{$parent} {\n    background-color: $color !important;\n  }\n  a#{$parent}:hover,\n  a#{$parent}:focus {\n    background-color: darken($color, 10%);\n  }\n}\n","// Single side border-radius\n\n@mixin border-top-radius($radius) {\n  border-top-right-radius: $radius;\n   border-top-left-radius: $radius;\n}\n@mixin border-right-radius($radius) {\n  border-bottom-right-radius: $radius;\n     border-top-right-radius: $radius;\n}\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n   border-bottom-left-radius: $radius;\n}\n@mixin border-left-radius($radius) {\n  border-bottom-left-radius: $radius;\n     border-top-left-radius: $radius;\n}\n","// Gradients\n\n\n\n// Horizontal gradient, from left to right\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12\n  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down\n}\n\n// Vertical gradient, from top to bottom\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12\n  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down\n}\n\n@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {\n  background-repeat: repeat-x;\n  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12\n  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n}\n@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-radial($inner-color: #555, $outer-color: #333) {\n  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);\n  background-image: radial-gradient(circle, $inner-color, $outer-color);\n  background-repeat: no-repeat;\n}\n@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {\n  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n}\n","// Clearfix\n//\n// For modern browsers\n// 1. The space content is one way to avoid an Opera bug when the\n//    contenteditable attribute is included anywhere else in the document.\n//    Otherwise it causes space to appear at the top and bottom of elements\n//    that are clearfixed.\n// 2. The use of `table` rather than `block` is only necessary if using\n//    `:before` to contain the top-margins of child elements.\n//\n// Source: http://nicolasgallagher.com/micro-clearfix-hack/\n\n@mixin clearfix() {\n  &:before,\n  &:after {\n    content: \" \"; // 1\n    display: table; // 2\n  }\n  &:after {\n    clear: both;\n  }\n}\n","// Center-align a block level element\n\n@mixin center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n","// Navbar vertical align\n//\n// Vertically center elements in the navbar.\n// Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.\n\n@mixin navbar-vertical-align($element-height) {\n  margin-top: (($navbar-height - $element-height) / 2);\n  margin-bottom: (($navbar-height - $element-height) / 2);\n}\n","// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin make-grid-columns($i: 1, $list: \".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}\";\n  }\n  #{$list} {\n    position: relative;\n    // Prevent columns from collapsing when empty\n    min-height: 1px;\n    // Inner gutter via padding\n    padding-left:  ceil(($grid-gutter-width / 2));\n    padding-right: floor(($grid-gutter-width / 2));\n  }\n}\n\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin float-grid-columns($class, $i: 1, $list: \".col-#{$class}-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-#{$class}-#{$i}\";\n  }\n  #{$list} {\n    float: left;\n  }\n}\n\n\n@mixin calc-grid-column($index, $class, $type) {\n  @if ($type == width) and ($index > 0) {\n    .col-#{$class}-#{$index} {\n      width: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index > 0) {\n    .col-#{$class}-push-#{$index} {\n      left: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index == 0) {\n    .col-#{$class}-push-0 {\n      left: auto;\n    }\n  }\n  @if ($type == pull) and ($index > 0) {\n    .col-#{$class}-pull-#{$index} {\n      right: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == pull) and ($index == 0) {\n    .col-#{$class}-pull-0 {\n      right: auto;\n    }\n  }\n  @if ($type == offset) {\n    .col-#{$class}-offset-#{$index} {\n      margin-left: percentage(($index / $grid-columns));\n    }\n  }\n}\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin loop-grid-columns($columns, $class, $type) {\n  @for $i from 0 through $columns {\n    @include calc-grid-column($i, $class, $type);\n  }\n}\n\n\n// Create grid for specific class\n@mixin make-grid($class) {\n  @include float-grid-columns($class);\n  @include loop-grid-columns($grid-columns, $class, width);\n  @include loop-grid-columns($grid-columns, $class, pull);\n  @include loop-grid-columns($grid-columns, $class, push);\n  @include loop-grid-columns($grid-columns, $class, offset);\n}\n","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n// Centered container element\n@mixin container-fixed($gutter: $grid-gutter-width) {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n  @include clearfix;\n}\n\n// Creates a wrapper for a series of columns\n@mixin make-row($gutter: $grid-gutter-width) {\n  margin-left:  ceil(($gutter / -2));\n  margin-right: floor(($gutter / -2));\n  @include clearfix;\n}\n\n// Generate the extra small columns\n@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  float: left;\n  width: percentage(($columns / $grid-columns));\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n}\n@mixin make-xs-column-offset($columns) {\n  margin-left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-push($columns) {\n  left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-pull($columns) {\n  right: percentage(($columns / $grid-columns));\n}\n\n// Generate the small columns\n@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-sm-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-offset($columns) {\n  @media (min-width: $screen-sm-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-push($columns) {\n  @media (min-width: $screen-sm-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-pull($columns) {\n  @media (min-width: $screen-sm-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the medium columns\n@mixin make-md-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-md-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-offset($columns) {\n  @media (min-width: $screen-md-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-push($columns) {\n  @media (min-width: $screen-md-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-pull($columns) {\n  @media (min-width: $screen-md-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the large columns\n@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-lg-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-offset($columns) {\n  @media (min-width: $screen-lg-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-push($columns) {\n  @media (min-width: $screen-lg-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-pull($columns) {\n  @media (min-width: $screen-lg-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n","/*\n * Global variables\n */\n$image-theme-path                : '../images/' !default;\n$image-theme-skin                : '../images/' !default;\n// standard colors\n$white\t\t    : #FFF !default;\n$black\t\t\t: #000 !default;\n$nocolor\t\t: transparent !default;\n$turquoise:   #473941 !default;\n\n\n// color for default theme\n$theme-color          : #b7e3e4 !default; /* main color which will be used for all main block styles... */\n$border-color\t      : #e8e8e8 !default;\n$border-color-base    :#e1e8ee !default; \n\n$theme-color-second  \t\t\t : #668036 !default;\n$theme-color-default             : $theme-color !default;\n$theme-color-hover               : $theme-color !default;\n\n\n// Theme Margin, Padding\n// -------------------------\n$theme-margin    : 30px !default;\n$theme-padding   : 30px !default;\n// fonts\n$font-family-second :  $font-family-sans-serif !default; \n$theme-padding : 30px !default;\n\n$font-icon: \"FontAwesome\"; \n/**\n * Import component variables\n */\n@import \"vars/form\";\n@import \"vars/nav\";\n@import \"vars/layout\";\n@import \"vars/elements\";\n@import \"vars/widget\";\n","// Select\n// -------------------------\n$select-size                            : 32px !default;\n$select-border-color                    : $border-color !default;\n$select-padding                         : 4px 6px !default;\n\n// Input\n// -------------------------\n$input-padding                          : 5px 6px !default;\n$input-font-size                        : $font-size-base - 1;\n\n$input-group-form-bg                    : transparent !default;\n$input-group-form-margin                : 0 0 5px 0!default;\n$input-group-padding                    : 6px 11px !default;\n$input-group-font-size                  : 12px !default;\n$input-group-addon-color                : #fff !default;\n$input-group-height                     : 42px !default;\n\n$input-form-bg                          : $gray-darker !default;\n\n// Button\n// -------------------------\n$btn-transform                          : uppercase !default;\n$btn-padding-vertical                   : 5px !default;\n$btn-padding-horizontal                 : 20px !default;\n$btn-font-size                          : 12px !default;\n$btn-line-height                        : 30px !default;\n$btn-border-radius                      : 4px !default;\n\n$btn-lg-padding-vertical                : 15px !default;\n$btn-lg-padding-horizontal              : 30px !default;\n$btn-lg-font-size                       : 18px !default;\n$btn-lg-line-height                     : $line-height-large !default;\n$btn-lg-border-radius                   : 5px !default;\n\n$btn-sm-padding-vertical                : 7px !default;\n$btn-sm-padding-horizontal              : 12px !default;\n$btn-sm-font-size                       : 10px !default;\n$btn-sm-line-height                     : $line-height-small !default;\n$btn-sm-border-radius                   : $border-radius-small !default;\n\n$btn-xs-padding-vertical                : 4px !default;\n$btn-xs-padding-horizontal              : 10px !default;\n$btn-xs-font-size                       : 10px !default;\n$btn-xs-line-height                     : $line-height-small !default;\n$btn-xs-border-radius                   : $border-radius-small !default;\n\n$btn-outline-color                      : $white !default;\n$btn-outline-hover-color                : $white !default;\n$btn-outline-height                     : 36px !default;\n$btn-outline-padding \t\t\t: 3px 15px !default;\n$btn-outline-bg                         : $theme-color !default;\n$btn-outline-hover-bg                   :$theme-color-second !default;\n$btn-outline-border                     : 0 !default;\n$btn-outline-border-hover               : 0 !default;\n$btn-outline-font-size                  : 12px !default;\n$btn-outline-line-height                : 28px !default;\n$btn-outline-border-radius              : 0 !default;\n\n$btn-outline-sm-padding-vertical        : 8px !default;\n$btn-outline-sm-padding-horizontal      : 18px !default;\n$btn-outline-sm-font-size               : 11px !default;\n$btn-outline-sm-line-height             : 1.3 !default;\n$btn-outline-sm-border-radius           : 3px !default;\n\n$btn-outline-xs-padding-vertical        : 5px !default;\n$btn-outline-xs-padding-horizontal      : 15px !default;\n$btn-outline-xs-font-size               : 11px !default;\n$btn-outline-xs-line-height             : 1.2 !default;\n$btn-outline-xs-border-radius           : 3px !default;\n\n$btn-outline-lg-padding-vertical        : 21px !default;\n$btn-outline-lg-padding-horizontal      : 48px !default;\n$btn-outline-lg-font-size               : 14px !default;\n$btn-outline-lg-line-height             : 3 !default;\n$btn-outline-lg-border-radius           : 4px !default;\n\n$btn-inverse-color                      : $black !default;\n$btn-inverse-hover-color                : $white !default;\n$btn-inverse-bg                         : $white !default;\n$btn-inverse-hover-bg                   : $black !default;\n$btn-inverse-border-color               : $border-color !default;\n$btn-inverse-border-hover-color         : $border-color !default;\n$btn-inverse-font-size                  : 12px !default;\n$btn-inverse-padding                    : 10px 15px !default;\n\n$btn-outline-inverse-color              : $theme-color-second !default;\n$btn-outline-inverse-bg                 : $black !default;\n$btn-outline-inverse-border-color       : 1px solid $btn-outline-inverse-bg !default;\n$btn-outline-inverse-hover-bg           : $theme-color !default;\n$btn-outline-inverse-hover-color        : $white !default;\n$btn-outline-inverse-border-hover-color : 1px solid $theme-color-second !default;\n\n// Search\n// -------------------------\n$search-bg                              : $white !default;\n$search-font-size                       : 12px !default;\n$search-padding                         : 15px !default;\n$search-width                           : auto !default;\n$search-button-bg                       : transparent !default;\n$search-main-button-bg                  : $white !default;\n$search-main-button-border              : $border-color !default;\n$search-main-button-color               : $gray-darker !default;\n$search-button-border                   : 0px !default;\n$search-button-hover-bg                 : $white !default;\n$search-button-color                    : $white !default;\n$search-button-size                     : 36px !default;\n$search-button-hover-color              : $gray-darker !default;\n$search-radius                          : 3px !default;\n$search-height                          : 50px !default;\n$search-border                          : transparent !default;\n$search-hover-border                    : $border-color !default;\n$search-border-radius                   : 4px !default;\n$search-categories-border-radius        : 4px !important;\n","// Main Menu\n// -------------------------\n$megamenu-bg                               : $white !default;\n$navbar-mega-border                        : transparent !default;\n$navbar-mega-line-height                   : 75px !default;\n\n$navbar-mega-skin2-bg                      : transparent !default;\n$navbar-mega-skin2-border                  : $border-color !default;\n$navbar-mega-skin2-line-height             : 30px !default; \n\n$navbar-text-transform                     : none !default;\n\n$navbar-font-size                          : 16px !default;\n$navbar-font-weight                        : 500 !default;\n$navbar-font-family                        : $font-family-monospace;\n$navbar-link-margin                        : 0 !default;\n$navbar-link-padding                       : 0 15px !default;\n$navbar-link-color                         : #000 !default;\n$navbar-link-hover-color                   : $theme-color !default;\n$navbar-link-hover-bg                      : $nocolor !default;\n$navbar-link-active-color                  : $theme-color !default;\n$navbar-link-active-bg                     : $nocolor !default;\n\n$navbar-widget-title-color                 : $black !default;\n$navbar-widget-title-margin                : 0 0 10px 0 !default;\n$navbar-widget-title-font-size             : 14px !default;\n$navbar-widget-title-font-weight\t\t       : 900 !default;\n\n$navbar-dropdown-padding                   : 10px 20px 0 !default;\n$navbar-dropdown-bg                        : #fff !default;\n$navbar-dropdown-size                      : 250px !default;\n$navbar-dropdown-link-color                : #000 !default;\n$navbar-dropdown-link-hover-color          : $theme-color !default;\n$navbar-dropdown-link-hover-bg             : $nocolor !default;\n$navbar-dropdown-link-transform            : none !default;\n$navbar-dropdown-link-font-size            : 14px !default;\n$navbar-dropdown-link-font-weight          : 400 !default;\n$navbar-dropdown-link-border-color         : $nocolor !default;\n\n$navbar-link-small-padding                 : 18px 0 !default;\n$navbar-link-large-padding                 : 46px 0 46px !default;  \n\n// Vertical Menu\n// -------------------------\n$navbar-verticalmenu-color:               \t#000 !default;\n$navbar-verticalmenu-border-radius:\t\t\t0 0 20px 20px !default;\n$navbar-verticalmenu-link-font-size:\t\t14px !default;\n$navbar-verticalmenu-link-line-height:\t\t22px !default;\n$navbar-verticalmenu-link-padding: \t\t\t8px 30px!default;\n$navbar-verticalmenu-border-color:          #eeeeee !default;\n$navbar-verticalmenu-background-color-hover:#f8f8f8 !default;\n// Top Menu\n// -------------------------\n$navbar-menutop-font-weight\t\t\t\t    : 800 !default;\n$navbar-menutop-font-size\t\t\t\t       : 12px !default;\n$navbar-menutop-padding-top\t\t\t\t    : 22px !default;\n$navbar-menutop-padding-bottom\t\t\t    : 18px !default;\n$navbar-menutop-color\t\t\t\t\t       : #828282 !default;\n$navbar-menutop-margin\t\t\t\t\t       : 0 10px !default;\n\n// Off-Canvas Menu\n// -------------------------\n$navbar-offcanvas-width                    : 69% !default;\n$navbar-offcanvas-bg-close                 : $nocolor !default;\n$navbar-offcanvas-color                    : $black !default;\n$navbar-offcanvas-bg                       : #f5f5f5  !default;\n$navbar-offcanvas-border                   : rgba(0, 0, 0, 0.1) !default;\n\n// Inverted navbar links\n// -------------------------\n$navbar-offcanvas-link-color               : $text-color !default;\n$navbar-offcanvas-link-hover-color         : #0281AB !default;\n$navbar-offcanvas-link-hover-bg            : transparent !default;\n$navbar-offcanvas-link-active-color        : $navbar-offcanvas-link-hover-color !default;\n$navbar-offcanvas-link-active-bg           : darken($navbar-offcanvas-bg, 10%) !default;\n$navbar-offcanvas-link-disabled-color      : #444 !default;\n$navbar-offcanvas-link-disabled-bg         : transparent !default;\n$navbar-offcanvas-link-font-size           : 14px !default;\n\n// Inverted navbar brand label\n// -------------------------\n$navbar-offcanvas-brand-color              : $navbar-offcanvas-link-color !default;\n$navbar-offcanvas-brand-hover-color        : $white !default;\n$navbar-offcanvas-brand-hover-bg           : transparent !default;\n\n// Inverted navbar search\n// -------------------------\n$navbar-offcanvas-search-bg                : lighten($navbar-offcanvas-bg, 25%) !default;\n$navbar-offcanvas-search-bg-focus          : $white !default;\n$navbar-offcanvas-search-border            : $navbar-offcanvas-bg !default;\n$navbar-offcanvas-search-placeholder-color : $light-gray !default;\n$navbar-offcanvas-search-input-bg          : transparentize($black, .10) !default;\n\n// Inverted navbar toggle\n// -------------------------\n$navbar-offcanvas-toggle-hover-bg          : $gray-dark !default;\n$navbar-offcanvas-toggle-icon-bar-bg       : $white !default;\n$navbar-offcanvas-toggle-border-color      : $gray-dark !default;\n\n$navbar-offcanvas-button-position          : -172px !default;","\n// Topbar\n// -------------------------\n$topbar-bg                                      : #fff !default;\n$topbar-link-color                              : $light-gray !default;\n$topbar-link-hover-color                        : $theme-color !default;\n$topbar-color                                   : $light-gray !default;\n$topbar-border                                  : 0 !default;\n$topbar-font-size                               : 13px !default;\n$topbar-icon-color                              : $gray-light !default;\n$topbar-icon-font-size                          : 10px !default;\n$topbar-text-transform                          : none !default;\n$topbar-padding                            \t\t: 12px 0 !default;\n\n//// Header\n\n$header-main-padding : 15px 0 !default; \n\n\n\n$massbottom-head-bg\t\t : $theme-color !default;\n$massbottom-head-padding : 6px 9px !default;\n$massbottom-head-color   : $theme-color !default;\n$massbottom-head-border-color: darken($massbottom-head-bg,4%)!default; \n\n/**\n *\n */\n\n $mainmenu-bg: #222222 !default;\n\n\n\n\n// Footer\n// -------------------------  \n$footer-bg                                      : #fff !default;\n$footer-color                                   : #86939e !default;\n$footer-transform                               : none !default;\n$footer-font-size                               : 14px !default; \n$footer-border                                  : none !default;\n$footer-padding-top                             : 50px !default;\n$footer-padding-bottom                          : 50px !default;\n$footer-text-hightlight                         : $white !default;\n$footer-link-font-size\t\t\t\t\t\t\t: 14px !default;\n$footer-column-margin                           : 0 0 25px 0 !default;\n$footer-link-color                              : #86939e !default;\n$footer-link-hover-color                        : $theme-color !default;\n$footer-icon-color                              : darken($white, 20%) !default;\n$footer-icon-font-size                          : 13px !default;\n$footer-heading-font-size                       : 18px !default;\n$footer-heading-color                           : $black !default;\n$footer-heading-margin                          : 0 0 25px !default;\n$footer-heading-padding                         : 0 0 20px !default;\n$footer-heading-display                         : none !default;\n$footer-heading-transform                       : none !default;\n$footer-list-transform                          : none !default;\n$footer-list-font-size                          : 14px !default; \n$footer-list-margin                             : 0 0 10px !default;\n$footer-list-light-height                       : 2.5 !default;  \n$footer-heading-fweight                         : 400 !default;\n$footer-heading-ffamily                         : $font-family-second !default;\n\n$footer-newsletter-padding                      : 25px !default;\n$footer-newsletter-bg                           : $theme-color !default;\n$footer-newsletter-color                        : #484848 !default;\n$footer-newsletter-heading-font-size            : 18px !default;\n\n$footer-top-bg \t\t\t\t\t\t\t\t\t: $white !default;\n$footer-top-color  \t\t\t\t\t\t\t\t: #999999 !default;\n$footer-top-padding-top\t\t\t\t\t\t\t: 12px !default; \n$footer-top-padding-bottom\t\t\t\t\t\t: 12px !default;\n$footer-top-font-size\t\t\t\t\t\t\t: 12px !default;\n$footer-top-letter-spacing\t\t\t\t\t\t: 2px !default;\n$footer-top-border-color \t\t\t\t\t\t: rgba(0, 0, 0, 0.1);\n// Copyright\n// -------------------------\n\n // Copyright\n// -------------------------\n$copyright-bg                                   : transparent !default;\n$copyright-color                                : #999 !default;\n$copyright-link-color                           : #999 !default;\n$copyright-padding-top                          : 0 !default;\n$copyright-padding-bottom                       : 0 !default;\n$copyright-font-size\t\t\t\t\t\t\t         : 13px !default; \n$copyright-font-weight\t\t\t\t\t\t\t      : 400 !default;\n\n$del-font-size\t\t\t\t\t\t\t\t\t         : 12px !default;\n$del-color\t\t\t\t\t\t\t\t\t\t         : #999999;","","/**\n *   Blocks Layout Selectors\n */\n$block-prefix                    : 'widget' !default;\n$block-selector                  : 'widget ' !default;\n$block-heading-selector          : 'widget-title, .widgettitle' !default;\n$block-content-selector          : 'widget-content' !default;\n$block-heading-reversed-selector : 'widget-title-reversed' !default;\n$container-prefix                : 'wpb-container' !default;\n\n\n\n// Box Modules\n// -------------------------\n$block-module-margin-bottom                     : 30px !default;\n$block-module-padding                           : 0px !default;\n$block-module-border-color                      : $border-color-base !default;\n$block-module-bg                                : #fff !default;\n\n$block-module-heading-color\t\t\t\t\t\t: #000000 !default;\n$block-module-heading-border                    : 0px !default;\n$block-module-heading-transform                 : none !default;\n$block-module-heading-line-height               : normal !default;\n$block-module-heading-bg                        : transparent !default;\n$block-module-heading-padding                   : 20px !default;\n$block-module-heading-margin                    : 0 0 10px !default;\n$block-module-heading-font-size                 : 16px !default;\n$block-module-heading-font-weight               : 700 !default;\n$block-module-heading-font-family               : $font-family-base !default;\n$block-module-heading-show-separator            : none !default;\n$block-module-heading-image-position            : 0 0 !default;\n\n$block-module-content-bg                        : $white !default;\n$block-module-content-border                    : 1px solid $border-color !default;\n$block-module-content-padding                   : 20px !default;\n$block-module-content-margin                    : 1px !default;\n$block-module-content-radius                    : 0px !default;\n\n$block-module-highlighted-bg                    : $theme-color !default;\n$block-module-highlighted-border                : solid 2px $theme-color !default;\n\n$block-module-footer-heading-color              : $white !default;\n\n$block-product-padding                          : 0 !default;\n$block-heading-letter-spacing                   : 0 !default;\n\n// Sidebar\n// -------------------------\n$block-sidebar-module-border                    : none !default;\n$block-sidebar-box-padding                      : 0 !default; \n$block-sidebar-box-margin                       : 0 0 30px !default;\n\n$block-sidebar-list-padding-vertical            : 13px 0px 13px 13px !default;\n$block-sidebar-list-border-color                : $border-color !default;\n\n$block-sidebar-hightlight-margin \t\t\t\t: 0 0 20px !default;\n$block-sidebar-heading-margin            \t\t: 0 !default;\n$block-sidebar-heading-hightlight-bg            : $nocolor !default;\n$block-sidebar-heading-hightlight-padding       : 0 !default;\n$block-sidebar-heading-hightlight-margin    \t: 0 !default;\n$block-sidebar-heading-hightlight-color         : $black !default;\n$block-sidebar-heading-hightlight-margin-bottom : 0px !default;\n$block-sidebar-heading-hightlight-font-size     : 14px !default;\n$block-sidebar-heading-hightlight-font-weight   : 900 !default;\n$block-sidebar-hightlight-content-bg\t\t\t: $nocolor !default;\n$block-sidebar-hightlight-content-color\t\t\t: #666666 !default; \n$block-sidebar-hightlight-content-padding\t\t: 0 !default;\n$block-sidebar-hightlight-border   \t\t\t\t: 1px solid rgba(0, 0, 0, 0.1) !default;\n$block-sidebar-hightlight-font-size \t\t\t: 12px !default;\t\n$block-sidebar-hightlight-transform \t\t\t: uppercase !default;\n$block-sidebar-hightlight-font-weight\t\t\t: 400 !default;\t\t\t\t\t\t\n$block-sidebar-link-hightlight-color            : $white !default;\n$block-sidebar-link-hightlight-hover-color      : $theme-color !default;\n$block-sidebar-list-hightlight-border-color     : #393939 !default;\n$block-sidebar-list-hightlight-font-size        : 10px !default;\n$block-sidebar-list-hightlight-padding          : 17px 15px !default;\n$block-sidebar-list-hightlight-image            : url('#{$image-theme-path}dot.jpg') 0 22px no-repeat !default;\n$block-sidebar-list-image                       : url('#{$image-theme-path}dot.jpg') 0 22px no-repeat !default;\n\n$block-sidebar-heading-padding                  : 0 0 30px !default;\n$block-sidebar-heading-margin                   : 0 !default;\n$block-sidebar-heading-font-size                : 14px !default;\n$block-sidebar-heading-color                    : $black !default; \n$block-sidebar-heading-line-height              : 20px !default;\n$block-sidebar-heading-font-weight\t\t\t\t: 900 !default;\n\n$block-sidebar-widget-border                    : 1px solid lighten($border-color, 3%) !default;\n\n/********* LAYOUT **************/","/**\n * Import component variables\n */\n@import 'mixins/rtl'; \n@import 'mixins/functions';\n@import 'mixins/template-mixins';","// Support for RTL (Right to Left) & non-latin fonts\r\n\r\n$rtl-left : left;\r\n$rtl-right : right;\r\n$rtl-center: center;\r\n\r\n// BASIC CONVERTER (ignore these)\r\n\r\n@mixin rtl-base-simple ($property, $direction) {\r\n  #{$property}:$direction;\r\n  .rtl & {\r\n    @if $direction == $rtl-right {\r\n      #{$property}:$rtl-left;\r\n    }\r\n    @else {\r\n      #{$property}:$rtl-right;\r\n    }\r\n  }\r\n}\r\n@mixin rtl-base-inherit ($property, $direction, $value, $inherit : inherit) {\r\n  #{$property}-#{$direction}: $value;\r\n  .rtl & {\r\n    @if $direction == $rtl-right {\r\n      #{$property}-#{$rtl-left}: $value;\r\n    }\r\n    @else {\r\n      #{$property}-#{$rtl-right}: $value;\r\n    }\r\n    #{$property}-#{$direction}: $inherit;\r\n  }\r\n}\r\n\r\n@mixin rtl-base-toprightbottomleft ($property, $t, $r, $b, $l) {\r\n  #{$property}: $t $r $b $l;\r\n  .rtl & {\r\n    #{$property}: $t $l $b $r;\r\n  }\r\n}\r\n\r\n// BODY STYLES\r\n\r\n@mixin rtl-direction ($forBody : true) {\r\n  direction: ltr;\r\n  @if $forBody {\r\n    &.rtl {\r\n      direction: rtl;\r\n    }\r\n  }\r\n  @else {\r\n    .rtl & {\r\n      direction: rtl;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin rtl-font-family ($ltr, $rtl, $forBody : false) {\r\n  font-family: $ltr;\r\n  @if $forBody {\r\n    &.rtl, &.non-latin {\r\n      font-family:$rtl;\r\n    }\r\n  }\r\n  @else {\r\n    .rtl &, .non-latin & {\r\n      font-family:$rtl;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// MARGIN\r\n\r\n@mixin rtl-margin ($t, $r, $b, $l) {\r\n  @include rtl-base-toprightbottomleft(margin,$t, $r, $b, $l);\r\n}\r\n@mixin rtl-margin-left ($value) {\r\n  @include rtl-base-inherit(margin,$rtl-left,$value);\r\n}\r\n@mixin rtl-margin-right ($value) {\r\n  @include rtl-base-inherit(margin,$rtl-right,$value);\r\n}\r\n\r\n// PADDING\r\n\r\n@mixin rtl-padding ($t, $r, $b, $l) {\r\n  @include rtl-base-toprightbottomleft(padding,$t, $r, $b, $l);\r\n}\r\n@mixin rtl-padding-left ($value) {\r\n  @include rtl-base-inherit(padding,$rtl-left,$value);\r\n}\r\n@mixin rtl-padding-right ($value) {\r\n  @include rtl-base-inherit(padding,$rtl-right,$value);\r\n}\r\n\r\n// BORDER\r\n\r\n@mixin rtl-border-left ($value) {\r\n  @include rtl-base-inherit(border,$rtl-left,$value);\r\n}\r\n@mixin rtl-border-right ($value) {\r\n  @include rtl-base-inherit(border,$rtl-right,$value);\r\n}\r\n\r\n// POSITION\r\n\r\n@mixin rtl-left ($value) {\r\n  #{$rtl-left}: $value;\r\n  .rtl & {\r\n    #{$rtl-right}: $value;\r\n    #{$rtl-left}: auto;\r\n  }\r\n}\r\n@mixin rtl-right ($value) {\r\n  #{$rtl-right}: $value;\r\n  .rtl & {\r\n    #{$rtl-left}: $value;\r\n    #{$rtl-right}: auto;\r\n  }\r\n}\r\n\r\n\r\n// CLEAR\r\n\r\n@mixin rtl-clear-left () {\r\n  @include rtl-base-simple(clear, $rtl-left);\r\n}\r\n@mixin rtl-clear-right () {\r\n  @include rtl-base-simple(clear, $rtl-right);\r\n}\r\n\r\n// TEXT-ALIGN\r\n\r\n@mixin rtl-text-align-left () {\r\n  @include rtl-base-simple(text-align, $rtl-left);\r\n}\r\n@mixin rtl-text-align-right () {\r\n  @include rtl-base-simple(text-align, $rtl-right);\r\n}\r\n@mixin rtl-text-align-center () {\r\n  @include rtl-base-simple(text-align, $rtl-center);\r\n}\r\n\r\n// FLOAT\r\n\r\n@mixin rtl-float-left () {\r\n  @include rtl-base-simple(float, $rtl-left);\r\n}\r\n@mixin rtl-float-right () {\r\n  @include rtl-base-simple(float, $rtl-right);\r\n}\r\n\r\n// BACKGROUND-POSITION\r\n\r\n@mixin rtl-background-position-left ($vertical) {\r\n  background-position:$rtl-left $vertical;\r\n  .rtl & {\r\n    background-position:$rtl-right $vertical;\r\n  }\r\n}\r\n@mixin rtl-background-position-right ($vertical) {\r\n  background-position:$rtl-right $vertical;\r\n  .rtl & {\r\n    background-position:$rtl-left $vertical;\r\n  }\r\n}\r\n\r\n@mixin rtl-background-position-percent ($vertical, $horPercent) {\r\n  background-position:$horPercent $vertical;\r\n  .rtl & {\r\n    background-position:100% - $horPercent $vertical;\r\n  }\r\n}\r\n\r\n// TEXT-SHADOW & BOX-SHADOW\r\n\r\n@mixin rtl-text-shadow ($x, $rest) {\r\n  text-shadow: $x $rest;\r\n  .rtl & {\r\n    text-shadow: -1 * $x $rest;\r\n  }\r\n}\r\n@mixin rtl-box-shadow ($x, $rest) {\r\n  -moz-box-shadow: $x $rest;\r\n  -webkit-box-shadow: $x $rest;\r\n  box-shadow: $x $rest;\r\n  .rtl & {\r\n    -moz-box-shadow: -1 * $x $rest;\r\n    -webkit-box-shadow: -1 * $x $rest;\r\n    box-shadow: -1 * $x $rest;\r\n  }\r\n}\r\n\r\n// BORDER-RADIUS\r\n\r\n@mixin rtl-border-radius-topright ($tl, $tr, $br, $bl) {\r\n  -moz-border-radius: $tl, $tr, $br, $bl;\r\n  -webkit-border-radius: $tl, $tr, $br, $bl;\r\n  border-top-radius: $tl, $tr, $br, $bl;\r\n  .rtl & {\r\n    -moz-border-radius: $tr, $tl, $bl, $br;\r\n    -webkit-border-radius: $tr, $tl, $bl, $br;\r\n    border-top-radius: $tr, $tl, $bl, $br;\r\n  }\r\n}\r\n\r\n@mixin rtl-border-radius-topright ($value) {\r\n  -moz-border-radius-top#{$rtl-right}: $value;\r\n  -webkit-border-top-#{$rtl-right}-radius: $value;\r\n  border-top-#{$rtl-right}-radius: $value;\r\n  .rtl & {\r\n    -moz-border-radius-top#{$rtl-left}: $value;\r\n    -webkit-border-top-#{$rtl-left}-radius: $value;\r\n    border-top-#{$rtl-left}-radius: $value;\r\n    -moz-border-radius-top#{$rtl-right}: inherit;\r\n    -webkit-border-top-#{$rtl-right}-radius: inherit;\r\n    border-top-#{$rtl-right}-radius: inherit;\r\n  }\r\n}\r\n\r\n@mixin rtl-border-radius-bottomright ($value) {\r\n  -moz-border-radius-bottom#{$rtl-right}: $value;\r\n  -webkit-border-bottom-#{$rtl-right}-radius: $value;\r\n  border-bottom-#{$rtl-right}-radius: $value;\r\n  .rtl & {\r\n    -moz-border-radius-bottom#{$rtl-left}: $value;\r\n    -webkit-border-bottom-#{$rtl-left}-radius: $value;\r\n    border-bottom-#{$rtl-left}-radius: $value;\r\n    -moz-border-radius-bottom#{$rtl-right}: inherit;\r\n    -webkit-border-bottom-#{$rtl-right}-radius: inherit;\r\n    border-bottom-#{$rtl-right}-radius: inherit;\r\n  }\r\n}\r\n\r\n@mixin rtl-border-radius-topleft ($value) {\r\n  -moz-border-radius-top#{$rtl-left}: $value;\r\n  -webkit-border-top-#{$rtl-left}-radius: $value;\r\n  border-top-#{$rtl-left}-radius: $value;\r\n  .rtl & {\r\n    -moz-border-radius-top#{$rtl-right}: $value;\r\n    -webkit-border-top-#{$rtl-right}-radius: $value;\r\n    border-top-#{$rtl-right}-radius: $value;\r\n    -moz-border-radius-top#{$rtl-left}: inherit;\r\n    -webkit-border-top-#{$rtl-left}-radius: inherit;\r\n    border-top-#{$rtl-left}-radius: inherit;\r\n  }\r\n}\r\n\r\n@mixin rtl-border-radius-bottomleft ($value) {\r\n  -moz-border-radius-bottom#{$rtl-left}: $value;\r\n  -webkit-border-bottom-#{$rtl-left}-radius: $value;\r\n  border-bottom-#{$rtl-left}-radius: $value;\r\n  .rtl & {\r\n    -moz-border-radius-bottom#{$rtl-right}: $value;\r\n    -webkit-border-bottom-#{$rtl-right}-radius: $value;\r\n    border-bottom-#{$rtl-right}-radius: $value;\r\n    -moz-border-radius-bottom#{$rtl-left}: inherit;\r\n    -webkit-border-bottom-#{$rtl-left}-radius: inherit;\r\n    border-bottom-#{$rtl-left}-radius: inherit;\r\n  }\r\n}\r\n","// Functions\n// --------------------------------------------------\n\n// Position mixin\n//==========================================\n// @param [string] $position: position type\n// @param [list] $args: list of offsets and values\n//==========================================\n@mixin position($position, $args) {\n    @each $o in top right bottom left {\n        $i: index($args, $o);\n        @if $i\n            and $i + 1 <= length($args)\n            and type-of( nth($args, $i + 1) ) == number {\n            #{$o}: nth($args, $i + 1);\n        }\n    }\n    position: $position;\n}\n\n\n// Absolute positioning mixin\n//==========================================\n// @param [list] $args: list of offsets and values\n//==========================================\n@mixin absolute($args) {\n    @include position(absolute, $args);\n}\n\n// Arrow mixin\n//==========================================\n// @param [string] $direction: arrow direction\n// @param [list] $position: list of offsets and values\n// @param [color] $color (inherit): arrow color\n// @param [number] $size (1em): arrow size\n//==========================================\n@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {\n    // Make sure the direction is valid\n    @if not index(top right bottom left, $direction) {\n        @warn \"Direction must be one of top, right, bottom or left.\";\n    }\n\n    @else {\n        @include absolute($position); // Position\n        @include square(0); // Size\n        content: '';\n        z-index: 2;\n\n        border-#{opposite-position($direction)}: $size * 1.5 solid $color;\n        $perpendicular-borders: $size solid transparent;\n\n        @if $direction == top or $direction == bottom {\n            border-left:   $perpendicular-borders;\n            border-right:  $perpendicular-borders;\n        }\n\n        @else if $direction == right or $direction == left {\n            border-bottom: $perpendicular-borders;\n            border-top:    $perpendicular-borders;\n        }\n    }\n}\n \n// Font size - rem\n//==========================================\n\n@function parseInt($n) { /* 2 */\n  @return $n / ($n * 0 + 1);\n}\n\n@mixin font-size($property, $values) {\n  $px : (); /* 3 */\n  $rem: (); /* 3 */\n\n  @each $value in $values { /* 4 */\n\n    @if $value == 0 or $value == auto { /* 5 */\n      $px : append($px , $value);\n      $rem: append($rem, $value);\n    }\n\n    @else {\n      $unit: unit($value);    /* 6 */\n      $val: parseInt($value); /* 6 */\n\n      @if $unit == \"px\" {  /* 7 */\n        $px : append($px,  $value);\n        $rem: append($rem, ($val / 10 + rem));\n      }\n\n      @if $unit == \"rem\" { /* 7 */\n        $px : append($px,  ($val * 10 + px));\n        $rem: append($rem, $value);\n      }\n    }\n  }\n\n  @if $px == $rem {     /* 8 */\n    #{$property}: $px;  /* 9 */\n  } @else {\n    #{$property}: $px;  /* 9 */\n    #{$property}: $rem; /* 9 */\n  }\n}\n\n\n//== Border\n//==========================================\n@mixin border( $coordinates: 0 0 0 0, $colour: $border-color, $style: solid ) {\n    $top: nth($coordinates, 1);\n    $right: nth($coordinates, 2);\n    $bottom: nth($coordinates, 3);\n    $left: nth($coordinates, 4);\n    @if not(unitless($top)) {\n        border-top: $top $style $colour;\n    }\n    @if not(unitless($right)) {\n        border-right: $right $style $colour;\n    }\n    @if not(unitless($bottom)) {\n        border-bottom: $bottom $style $colour;\n    }\n    @if not(unitless($left)) {\n        border-left: $left $style $colour;\n    }\n}\n\n// State and hover\n//==========================================\n@mixin state-hover-default($time, $background, $border-color){\n    @include transition(all $time);\n    &:hover{\n      background: $background;\n      border-color: $border-color;\n    }\n}\n\n@mixin state-hover($time,$height,$color){\n    @include box-shadow(inset 0 0 0 0 $color);\n    @include transition(all $time cubic-bezier(0.8,0,0,1));\n    &:hover{\n        @include transition(all $time cubic-bezier(0.8,0,0,1));\n        @include box-shadow(inset 0 (-$height) 0 0 $color);\n    }\n}\n\n@mixin state-hover-2($background){\n    position: relative;\n    z-index: 10;\n    &:after{\n        content: \"\";\n        display: block;\n        z-index: -50;\n        background-color: $background;\n        visibility: hidden;\n        @include scale(0);\n        @include vertical-center(100%,100%);\n        @include opacity(0);\n        @include transition-delay(0.3s,0s);\n        @include transition(transform 0s cubic-bezier(0.19,1,0.22,1) 0.3s,opacity 0.3s cubic-bezier(0.19,1,0.22,1));\n    }\n    &:hover{\n        &:after{\n            visibility: visible;\n            @include scale(1);\n            @include opacity(1);\n            @include transition(transform 0.6s cubic-bezier(0.19,1,0.22,1),opacity 0.5s cubic-bezier(0.19,1,0.22,1));\n        }\n    }\n}\n\n\n\n//== Flexible Layout\n//==========================================\n\n@mixin flexbox {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -moz-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n\n%flexbox {\n    @include flexbox;\n}\n\n@mixin inline-flex {\n    display: -webkit-inline-box;\n    display: -webkit-inline-flex;\n    display: -moz-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n}\n\n%inline-flex {\n    @include inline-flex;\n}\n\n\n\n// Retina Sprite Mixins\n\n@mixin retina-sprite-background($url,$position,$width,$height){\n    background-repeat: no-repeat;\n    background-image: url($url);\n    background-position: $position;\n    width:$width;\n    height:$height;\n}\n\n/** elements mixins **/\n\n@mixin border-exclude-top($border-deep, $border-type , $border-color ){\n   border-bottom: $border-deep $border-type $border-color ;\n   border-left: $border-deep $border-type $border-color ;\n   border-right: $border-deep $border-type $border-color ;\n}\n\n@mixin border-exclude-bottom($border-deep, $border-type , $border-color ){\n   border-top: $border-deep $border-type $border-color ;\n   border-left: $border-deep $border-type $border-color ;\n   border-right: $border-deep $border-type $border-color ;\n}\n\n@mixin border-exclude-left($border-deep, $border-type , $border-color ){\n   border-top: $border-deep $border-type $border-color ;\n   border-bottom: $border-deep $border-type $border-color ;\n   border-right: $border-deep $border-type $border-color ;\n}\n\n@mixin border-exclude-right($border-deep, $border-type , $border-color ){\n   border-top: $border-deep $border-type $border-color ;\n   border-bottom: $border-deep $border-type $border-color ;\n   border-left: $border-deep $border-type $border-color ;\n}\n\n@mixin rounded-corners ($radius) {\n   -webkit-border-radius: $radius;\n   -moz-border-radius: $radius;\n   -ms-border-radius: $radius;\n   -o-border-radius: $radius;\n   border-radius: $radius;\n}\n\n@mixin clearboxstyle(){\n   background: none;\n   border:none;\n}\n\n@mixin clearfloat(){\n   float: none;\n   width: 100%;\n}\n \n\n@mixin transform-style($transform-style){\n   -webkit-transform-style: $transform-style;                    \n   -moz-transform-style: $transform-style;                    \n   -ms-transform-style: $transform-style;                    \n   -o-transform-style: $transform-style;                    \n   transform-style: $transform-style;\n}\n\n@mixin backface-visibility($backface-visibility){\n   backface-visibility: $backface-visibility;  /* W3C */\n   -webkit-backface-visibility: $backface-visibility; /* Safari & Chrome */\n   -moz-backface-visibility: $backface-visibility; /* Firefox */\n   -ms-backface-visibility: $backface-visibility; /* Internet Explorer */\n   -o-backface-visibility: $backface-visibility; /* Opera */\n}\n\n@mixin animation-theme($animation-duration, $animation-fill-mode, $animation-name){\n   -webkit-animation-duration: $animation-duration; \n   -moz-animation-duration: $animation-duration; \n   -ms-animation-duration: $animation-duration; \n   -o-animation-duration: $animation-duration; \n   animation-duration: $animation-duration; \n\n   -webkit-animation-fill-mode: $animation-fill-mode;\n   -moz-animation-fill-mode: $animation-fill-mode;\n   -ms-animation-fill-mode: $animation-fill-mode;\n   -o-animation-fill-mode: $animation-fill-mode;\n   animation-fill-mode: $animation-fill-mode;\n\n   -webkit-animation-name: $animation-name;\n   -moz-animation-name: $animation-name; \n   -ms-animation-name: $animation-name; \n   -o-animation-name: $animation-name; \n   animation-name: $animation-name; \n}\n\n@mixin perspective($perspective){\n   -webkit-perspective: $perspective;\n   -ms-perspective: $perspective;\n   -moz-perspective: $perspective;\n   -o-perspective: $perspective;\n   perspective: $perspective;    \n}\n\n/**\n* Transition-timing-function property@mixin \n*/\n@mixin transition-timing-function($timing-function) {\n   -moz-transition-timing-function: $timing-function;\n   -o-transition-timing-function: $timing-function;\n   -webkit-transition-timing-function: $timing-function;\n   transition-timing-function: $timing-function;\n}\n \n\n@mixin appearance($appearance){\n   appearance: $arguments;\n   -moz-appearance: $arguments;\n   -ms-appearance: $arguments;\n   -o-appearance: $arguments;\n   -webkit-appearance: $arguments; \n}\n\n\n/*background RGBA\n============================================*/\n@mixin rgba($colour, $alpha)\n{\n   $alphaColour: hsla(hue($colour), saturation($colour), lightness($colour), $alpha);\n   $ieAlphaColour: argb($alphaColour);   \n   background-color: $colour; \n   background-color: $alphaColour;       \n   zoom: 1; \n   background-color: transparent\\9;   \n   \n   \n}\n\n\n@mixin border-rgba($colour, $alpha)\n{\n   $alphaColour: hsla(hue($colour), saturation($colour), lightness($colour), $alpha);\n   $ieAlphaColour: argb($alphaColour);   \n   border-color: $colour; \n   border-color: $alphaColour;       \n   zoom: 1; \n   border-color: transparent\\9;\n  \n}\n\n//copyright\n\n//sub heading (h2,h3) define\n@mixin sub-heading {\n  float:left;\n  color: $block-heading-color;\n  text-transform: uppercase;\n  font: 600 14px/20px $font-custom;\n  padding: 8px 15px;\n  margin: 0 0 20px;\n  min-width: 120px;\n  position: relative;\n  background: $theme-bg-default;\n}\n@mixin sub-heading-before {\n  height: 0;\n  width: 0;\n  right: 45%;\n  top: 100%;\n  content: \"\";\n  position: absolute;\n  border: 4px solid transparent;\n  border-top-color: $theme-bg-default;\n}\n\n//background\n@mixin background-hover {\n  color: $base-text-color;\n  background: rgba(228, 50, 40, 0.3);\n}\n\n/*inline-block\n============================================*/\n\n@mixin inline-block() {\n   display: inline-block;\n   *display: inline;\n   zoom: 1;   \n}\n\n// Sizing shortcuts\n@mixin size($width, $height) {\n  width: $width;\n  height: $height;\n}\n\n\n\n// Panels\n// -------------------------\n@mixin box-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {\n  border-color: $border;\n\n  & > .box-heading {\n    color: $heading-text-color;\n    background-color: $heading-bg-color;\n    border-color: $heading-border;\n\n    +  .box-content {\n      border-top-color: $border;\n    }\n  }\n  & > .box-content{\n      border-color:$border;\n  }\n  & > .box-footer {\n    + .box-collapse .box-body {\n      border-bottom-color: $border;\n    }\n  }\n}\n@mixin button-3d($suffixclass, $height3d ,$color3d){\n  border: 0;\n  @if ($suffixclass == \"empty\") {\n      box-shadow: 0 $height3d $color3d inset;\n      -o-box-shadow: 0 $height3d $color3d inset;\n      -moz-box-shadow: 0 $height3d $color3d inset;\n      -webkit-box-shadow: 0 $height3d $color3d inset;\n      -ms-box-shadow: 0 $height3d $color3d inset;\n  }\n  @else {\n  &.btn-#{$suffixclass}{\n     box-shadow: 0 $height3d $color3d inset;\n      -o-box-shadow: 0 $height3d $color3d inset;\n      -moz-box-shadow: 0 $height3d $color3d inset;\n      -webkit-box-shadow: 0 $height3d $color3d inset;\n      -ms-box-shadow: 0 $height3d $color3d inset;\n    }\n  }\n}\n\n@mixin button-inverse( $suffixclass,  $color ,$background ){\n \n  &.btn-#{$suffixclass}{\n      &:hover{ \n        color:$color;\n        background:transparent;\n      }\n  }\n}\n\n@mixin button-outline( $suffixclass, $color, $hovercolor ){\n  background:transparent;\n  &.btn-#{$suffixclass}{\n      color:$color;\n      &:hover{\n          color:$hovercolor;\n      }\n  }\n}\n/// button variant outline\n@mixin button-variant-outline($color, $background, $border, $colorhover, $bghover, $borderhover ) {\n  color: $color;\n  background-color: $background;\n  border-color: $border;\n\n  &:hover,\n  &:focus,\n  &:active,\n  &.active {\n    color: $colorhover;\n    background-color: $bghover;\n        border-color: $borderhover ;\n  }\n  .open & { &.dropdown-toggle {\n    color: $colorhover;\n    background-color: $bghover;\n        border-color: $borderhover ;\n  } }\n  &:active,\n  &.active {\n    background-image: none;\n  }\n  .open & { &.dropdown-toggle {\n    background-image: none;\n  } }\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    &,\n    &:hover,\n    &:focus,\n    &:active,\n    &.active {\n      background-color: $background;\n          border-color: $border;\n    }\n  }\n\n  .badge {\n    color: $background;\n    background-color: $color;\n  }\n}\n// icon variant inverse\n\n@mixin icons-inverse( $suffixclass,  $color ,$background ){\n \n  &.icons-#{$suffixclass}{\n      &:hover{ \n        color:$color;\n        background:transparent;\n      }\n  }\n}\n// icon variant outline\n\n@mixin icons-outline( $suffixclass, $color, $hovercolor ){\n  &.icons-#{$suffixclass}{\n  background:transparent;\n      color:$color;\n      &:hover{\n          color:$hovercolor;\n      }\n  }\n}\n\n// Block\n// -------------------------\n@mixin block-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {\n  & > .#{$block-prefix}-footer {\n    + .#{$block-prefix}-collapse .#{$block-prefix}-body {\n      border-bottom-color: $border;\n    }\n  }\n}\n\n/****/\n/****/\n@mixin container-layout-variant($color, $background, $linkcolor ){\n    background: $background;\n    color: $color;\n    a{\n      color:$linkcolor; \n      &:hover{\n        color:$link-hover-color; \n      }  \n    }         \n}\n\n@mixin widget-specical-style(){\n  .widget-heading{\n      font-size: 24px;\n      letter-spacing: -1px;\n      position: relative;\n      margin: 0;\n      span{\n        position: relative;\n        margin-bottom: 10px;\n        display: block;\n    }\n    span.description{\n      font-size: 10px;\n      color: $text-color;\n    }  \n   } \n}","// Box Size\r\n// -------------------------\r\n@mixin box-size($background, $padding-top,$padding-bottom){\r\n    background: $background;\r\n    padding-top: $padding-top;\r\n    padding-bottom: $padding-bottom;\r\n}\r\n\r\n// Button\r\n// -------------------------\r\n@mixin button-outline($color, $background, $border, $background-hover, $color-hover, $border-hover, $border-radius) {\r\n    color: $color;\r\n    background-color: $background;\r\n    border: $border;\r\n    @include border-radius($border-radius);\r\n    &:hover,\r\n    &:focus,\r\n    &:active,\r\n    &.active {\r\n        color: $color-hover;\r\n        background-color: $background-hover;\r\n        border: $border-hover;\r\n    }\r\n    .fa,.icon{\r\n        font-size: $icon-font-size-base;\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n// Block\r\n// -------------------------\r\n@mixin block-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {\r\n    border-color: $border;\r\n    background: $heading-bg-color;\r\n    & .#{$block-heading-selector} {\r\n        & span:before, & span:after{ background:$white; }\r\n        color: $heading-text-color;\r\n        background-color: $heading-bg-color;\r\n        border-color: $heading-border;\r\n        + .#{$block-prefix}-collapse .#{$block-content-selector} {\r\n            border-top-color: $border;\r\n        }\r\n    }\r\n    & > .#{$block-prefix}-footer {\r\n        + .#{$block-prefix}-collapse .#{$block-prefix}-body {\r\n            border-bottom-color: $border;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin block-elements-styles($border, $heading-text-color, $heading-bg-color, $heading-border, $text-color, $text-color-primary){\r\n    border-color: $border;\r\n    background: $heading-bg-color;\r\n    & .#{$block-heading-selector} {\r\n        color: $heading-text-color;\r\n        background-color: $heading-bg-color;\r\n        border-color: $heading-border;\r\n        + .#{$block-prefix}-collapse .#{$block-content-selector} {\r\n            border-top-color: $border;\r\n        }\r\n    }\r\n    & > .#{$block-prefix}-footer {\r\n        + .#{$block-prefix}-collapse .#{$block-prefix}-body {\r\n            border-bottom-color: $border;\r\n        }\r\n    }\r\n}\r\n\r\n/****/\r\n@mixin container-layout-variant($color, $background, $linkcolor,  $topbar-link-color-hover ){\r\n    background: $background;\r\n    color: $color;\r\n    a{\r\n        color:$linkcolor;\r\n    }\r\n    a:hover{\r\n        color: $topbar-link-color-hover;\r\n    }\r\n}\r\n\r\n//== Inline block\r\n//==========================================\r\n@mixin inline-block ($haslayout : true){\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    @if $haslayout == true {\r\n        .lt-ie8 & {\r\n            display: inline;\r\n            zoom: 1;\r\n        }\r\n    }\r\n}\r\n\r\n//== vertical block\r\n//==========================================\r\n@mixin vertical-center( $width: 100px, $height: 100px) {\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    top: 0;\r\n    margin: auto;\r\n    width: $width;\r\n    height: $height;\r\n    position: absolute;\r\n}\r\n\r\n//== Translate X - Y - Z\r\n//==========================================\r\n@mixin translateX($x) {\r\n    -webkit-transform: translateX($x);\r\n    -ms-transform: translateX($x); // IE9 only\r\n    -o-transform: translateX($x);\r\n    transform: translateX($x);\r\n}\r\n\r\n@mixin translateY($y) {\r\n    -webkit-transform: translateY($y);\r\n    -ms-transform: translateY($y); // IE9 only\r\n    -o-transform: translateY($y);\r\n    transform: translateY($y);\r\n}\r\n\r\n@mixin translateZ($z) {\r\n    -webkit-transform: translateZ($z);\r\n    -ms-transform: translateZ($z); // IE9 only\r\n    -o-transform: translateZ($z);\r\n    transform: translateZ($z);\r\n}\r\n\r\n//== Transform\r\n//==========================================\r\n@mixin transform($argument){\r\n    -webkit-transform: ($argument);\r\n    -moz-transform: ($argument);\r\n    -ms-transform: ($argument);\r\n    -o-transform: ($argument);\r\n    transform: ($argument);\r\n}\r\n\r\n//== Transform\r\n//==========================================\r\n@mixin transition-delay($time1,$time2){\r\n    -webkit-transition-delay: ($time1,$time2);\r\n    -moz-transition-delay: ($time1,$time2);\r\n    -ms-transition-delay: ($time1,$time2);\r\n    -o-transition-delay: ($time1,$time2);\r\n    transition-delay: ($time1,$time2);\r\n}\r\n\r\n//== Background Size\r\n//==========================================\r\n@mixin background-size($size1,$size2) {\r\n    -webkit-background-size: ($size1,$size2);\r\n    -moz-background-size: ($size1,$size2);\r\n    -ms-background-size: ($size1,$size2);\r\n    -o-background-size: ($size1,$size2);\r\n    background-size: ($size1,$size2);\r\n}\r\n\r\n//== Background origin\r\n//==========================================\r\n@mixin background-origin($value1,$value2){\r\n    -webkit-background-origin: ($value1,$value2);\r\n    -moz-background-origin: ($value1,$value2);\r\n    -ms-background-origin: ($value1,$value2);\r\n    -o-background-origin: ($value1,$value2);\r\n    background-origin: ($value1,$value2);\r\n}\r\n\r\n//== Border radius\r\n//==========================================\r\n@mixin border-radius($radius) {\r\n    border-radius         : $radius;\r\n    -webkit-border-radius : $radius;\r\n    -moz-border-radius    : $radius;\r\n    -ms-border-radius     : $radius;\r\n    -o-border-radius      : $radius;\r\n}\r\n\r\n//== Text Shadow\r\n//==========================================\r\n@mixin text-shadow($shadow) {\r\n    text-shadow         : $shadow;\r\n    -webkit-text-shadow : $shadow;\r\n    -moz-text-shadow    : $shadow;\r\n    -ms-text-shadow     : $shadow;\r\n    -o-text-shadow      : $shadow;\r\n}\r\n\r\n//== Transform Origin\r\n//==========================================\r\n@mixin transform-origin($originX,$originY) {\r\n    -webkit-transform-origin : $originX $originY;\r\n    -moz-transform-origin    : $originX $originY;\r\n    -ms-transform-origin     : $originX $originY; // IE9 only\r\n    transform-origin         : $originX $originY;\r\n}\r\n\r\n//== appearance\r\n//==========================================\r\n@mixin appearance() {\r\n    -webkit-appearance : none;\r\n    -moz-appearance    : none;\r\n    -o-appearance      : none;\r\n    -ms-appearance     : none;\r\n    appearance         : none;\r\n}\r\n\r\n//== selection\r\n//==========================================\r\n$prefixes: (\"-moz-\", \"\");\r\n@mixin selection($color, $background) {\r\n    @each $prefix in $prefixes {\r\n        ::#{$prefix}selection {\r\n            color: $color;\r\n            background: $background;\r\n        }\r\n    }\r\n}\r\n\r\n//== animation fill mode\r\n//==========================================\r\n@mixin animation-fill-mode($fill) {\r\n    -webkit-animation-fill-mode: $fill;\r\n    -moz-animation-fill-mode: $fill;\r\n    -o-animation-fill-mode: $fill;\r\n    animation-fill-mode: $fill;\r\n}\r\n\r\n//== filter\r\n//==========================================\r\n@mixin filter($argument){\r\n    filter         : $argument;\r\n    -webkit-filter : $argument;\r\n    -moz-filter    : $argument;\r\n    -o-filter      : $argument;\r\n    -ms-filter     : $argument;\r\n}\r\n\r\n// Clear Lists\r\n// -------------------------\r\n@mixin clear-list(){\r\n    padding    : 0;\r\n    margin     : 0;\r\n    list-style : none;\r\n}\r\n\r\n// Formart lists widget\r\n// -------------------------\r\n@mixin lists-style() {\r\n    ul,ol{\r\n        @include clear-list();\r\n        li{\r\n            &:first-child{\r\n\r\n            }\r\n            &:last-child{\r\n                border-bottom: 0;\r\n                padding-bottom: 0;\r\n            }\r\n            .children{\r\n                > li{\r\n                    &:before{\r\n                        top: 24px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ul{\r\n            li:first-child{\r\n                padding-top: 14px;\r\n                background-position: 0 24px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@import \"functions\";"],"names":[],"mappings":"AAAA;;;;;;;;;EASE;AC+DF,6CAA6C;AgCxE7C;;GAEG;AAWuC,gEAAgE;AAkB1G;;GAEG;AGRH;;GAEG;AE3BH;;GAEG;AAsFH,iCAAiC;ACxFjC;;GAEG;AEkNH,uBAAuB;AAyFvB;;EAEE;AAkBF;8CAC8C;AAwD9C;8CAC8C;AA2J9C,MAAM;AACN,MAAM;ACndN,MAAM;ADgJN,uBAAuB;AAyFvB;;EAEE;AAkBF;8CAC8C;AAwD9C;8CAC8C;AA2J9C,MAAM;AACN,MAAM;AzCpgBN,AAAmB,IAAf,CAAC,aAAa,CAAC,kBAAkB,CAAC;EACpC,SAAS,EAAE,cAAc,GAAI;;AAE/B,AAAmB,IAAf,CAAC,aAAa,CAAC,SAAS,CAAC;EAC3B,KAAK,EAAE,IAAI,GAAI"} */
